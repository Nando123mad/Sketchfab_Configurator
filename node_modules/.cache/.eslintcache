[{"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/index.js":"1","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Layout.js":"2","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/reportWebVitals.js":"3","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/App.js":"4","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/MyVault.js":"5","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/CheckOut.js":"6","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/Community.js":"7","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Accessories.js":"8","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/Profile.js":"9","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Header.js":"10","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/LoadingScreen.jsx":"11","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/MobileModal.jsx":"12","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Dots.jsx":"13","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ModelViewerHandler.jsx":"14","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/AccessoriesMenuOffset.jsx":"15","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/SketchfabViewer.jsx":"16","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/MaterialChange.jsx":"17","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/Annotations.jsx":"18","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ModelChange.jsx":"19","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/TextureChange.jsx":"20","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ObjectVisibility.jsx":"21","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/useIsMount.jsx":"22"},{"size":572,"mtime":1694745173423,"results":"23","hashOfConfig":"24"},{"size":1031,"mtime":1691686041263,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1690920244524,"results":"26","hashOfConfig":"24"},{"size":2129,"mtime":1703888520152,"results":"27","hashOfConfig":"24"},{"size":578,"mtime":1692110352146,"results":"28","hashOfConfig":"24"},{"size":586,"mtime":1692110236754,"results":"29","hashOfConfig":"24"},{"size":130,"mtime":1691072287477,"results":"30","hashOfConfig":"24"},{"size":7996,"mtime":1703888744050,"results":"31","hashOfConfig":"24"},{"size":111,"mtime":1691072287478,"results":"32","hashOfConfig":"24"},{"size":3670,"mtime":1704216205699,"results":"33","hashOfConfig":"24"},{"size":441,"mtime":1696016757585,"results":"34","hashOfConfig":"24"},{"size":439,"mtime":1696016758830,"results":"35","hashOfConfig":"24"},{"size":425,"mtime":1691011667523,"results":"36","hashOfConfig":"24"},{"size":1643,"mtime":1703888383269,"results":"37","hashOfConfig":"24"},{"size":2634,"mtime":1703890130720,"results":"38","hashOfConfig":"24"},{"size":9069,"mtime":1703872795441,"results":"39","hashOfConfig":"24"},{"size":2986,"mtime":1703880134817,"results":"40","hashOfConfig":"24"},{"size":1018,"mtime":1691698427638,"results":"41","hashOfConfig":"24"},{"size":5467,"mtime":1703738549390,"results":"42","hashOfConfig":"24"},{"size":16348,"mtime":1703738549391,"results":"43","hashOfConfig":"24"},{"size":5503,"mtime":1703888433967,"results":"44","hashOfConfig":"24"},{"size":206,"mtime":1691172193352,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"qnwg19",{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"49"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"49"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"49"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/index.js",[],[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Layout.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/reportWebVitals.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/App.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/MyVault.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/CheckOut.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/Community.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Accessories.js",["122","123","124"],[],"import React, { useState } from \"react\";\nimport \"../Styles/accessories.css\";\nimport InfoPic from \"../Images/../Images/information.svg\";\nimport Check from \"../Images/check_circle.png\";\nimport Reset from \"../Images/reset.png\";\nimport Slider from \"../Images/vertical-slider.png\";\nimport Data from \"../api/API_Accessories.json\";\nimport Dots from \"./Dots\";\n\nfunction Accessories(props) {\n  const [accessoryTab, setAccessoryTab] = useState(0);//current accessory tab selection\n  const [equipment, setEquipment] = useState([0,0,0,0,0,0])//equipment current selection\n  const [annotationSel, setAnnotationSel] = useState(null);//Annotation Visibility\n  const [accessoryFocus, setAccessoryFocus] = useState(false);//Accessory Visibility\n\n  //update current tab selection (value = tabIndex)\n  function AccessoryTabSelection(value){\n    //Get accessory list\n    var elem = document.getElementsByClassName(\"leftside\");  \n\n    //check if the selection is the current selected tab so we can skip\n    if(value === accessoryTab){//Clicked on the already selected tab\n      //Send accessoryTab index values upstream to change material visibility\n      if(accessoryFocus){//already on...so turn off focus\n        props.AccessoryVisibility(9);\n        elem[value].classList.remove(\"underline\");\n      }else{//turn on focus\n        props.AccessoryVisibility(value);\n        elem[value].classList.add(\"underline\");\n      }\n      setAccessoryFocus(!accessoryFocus);\n    }else{\n      //Manually Send accessoryTab index of 9 to change material to full visibility\n      props.AccessoryVisibility(9);\n      setAccessoryFocus(false);\n\n      //Reset and turn off Annotations\n      setAnnotationSel(null);\n      props.AnnotationVisibility(false);\n\n      //Set accessory to fetch api for proper information displayed\n      setAccessoryTab(value);\n  \n      //Loop through accessory list and assign default styling for all   \n      for (var i = 0; i < elem.length; i++) {\n        elem[i].className = \"leftside\";\n      }\n      //update current tab selection with higlighted styling\n      elem[value].classList.add(\"btnSelected\");\n    }\n  }\n  \n  //send values to the sketchfabviewer specifiying the equipped accessory\n  //AccessorieID(int), ObjectID(int), TextureChange(bool), UID(int)\n  function EquipAccessory(accessoryTab, id, texChange, uid){\n    // Create a copy of the array\n    const updatedEquipment = [...equipment];\n\n    // Modify the desired index\n    updatedEquipment[accessoryTab] = id; \n\n    //check if the selection is the already selected accessory\n    if(updatedEquipment[accessoryTab] == equipment[accessoryTab]){\n      console.log('same Accessory is clicked');\n      console.log(accessoryTab, id, texChange, uid)\n      if(uid===800000){\n        console.log('offset camera: false')\n        props.CameraOffset(false);\n      }\n      props.AccessorySelection([accessoryTab, id, texChange, uid]);\n\n\n      updatedEquipment[accessoryTab] = null; \n      setEquipment(updatedEquipment); \n      //If above 6 (an accessory) and we want to give the option to \n\n      //turn off item if its an accessory.\n    }else{\n      // Update the state with the modified array\n      setEquipment(updatedEquipment); \n      if(uid===800000){\n        console.log('offset camera: true')\n        props.CameraOffset(true);\n      }\n      //Send values to parent\n      props.AccessorySelection([accessoryTab, id, texChange, uid]);\n\n      //turn off annotation\n      setAnnotationSel(null)\n      props.AnnotationVisibility(false);\n\n    }\n  }\n\n  function ShowAnnotations(id){\n    //Only show annotation if its for the current equipment\n    if(id===equipment[accessoryTab]){\n      //check if the selection is the already selected annotation\n      if(id === annotationSel){\n        setAnnotationSel(null)\n        props.AnnotationVisibility(false);\n      }else{\n        setAnnotationSel(id)\n        props.AnnotationVisibility(true);\n      }\n    }else{\n      console.log('not the current selected equipment')\n    }\n  }\n\n  function ResetConfig(){\n    setEquipment([0,0,0,0,0,0,3])\n    //Also if suppressor is on lets turn it off and change the camera position or atleast make a call to move the camera correctly. \n\n    //Pass a unique value (1000000) that forces a reset on texutres\n    props.AccessorySelection([0, 0, true, 1000000]);\n  }\n\n  return (\n    <div id='load-accessories' className=\"accessories\">\n      <div className=\"accessoriesContainer\">\n        <Dots Top Right/>\n        <Dots Top Left/>\n        <Dots Bottom Right/>\n        <Dots Bottom Left/>\n\n        <div className=\"accessoriesLeft\">\n          {/* Top Left Card */}\n          <div className=\"accessoriesTitle\">ACCESSORIES</div>\n\n          {/* Bottom Left Long Card */}\n          <div className=\"accessoriesTitleBtns\"> \n            <button  // {/* <img src={Check} alt=\"checkmark\" className=\"checkImg\" />  */}\n              onClick={() => AccessoryTabSelection(0)} className=\"leftside btnSelected\"> Fire Control Unit </button>\n            <button onClick={() => AccessoryTabSelection(1)} className=\"leftside\"> Grip Mods </button>\n            <button onClick={() => AccessoryTabSelection(2)} className=\"leftside\"> Slides </button>\n            <button onClick={() => AccessoryTabSelection(3)} className=\"leftside\"> Barrels </button>\n            <button onClick={() => AccessoryTabSelection(4)} className=\"leftside\"> Guides & Springs </button>\n            <button onClick={() => AccessoryTabSelection(5)} className=\"leftside\"> Magazines </button>\n            <button onClick={() => AccessoryTabSelection(6)} className=\"leftside\"> Optics </button>\n            <button onClick={() => AccessoryTabSelection(7)} className=\"leftside\"> Suppressor </button>\n            <button onClick={() => AccessoryTabSelection(8)} className=\"leftside\"> Flashlight </button>\n          </div>\n        </div>\n\n        <div className=\"accessoriesRight\">\n          {/* Top Right Card */}\n          <div className=\"arTop\">\n            <button onClick={()=>{ResetConfig()}} className=\"arTopBtn\">\n              <img src={Reset} alt=\"refresh\" className=\"reset\" />{\" \"}\n              <div>RESET CONFIGURATION</div>\n            </button>\n            <div className=\"sliderContainer\">\n              <img src={Slider} alt=\"slider\" className=\"slider\" />\n            </div>\n          </div>\n\n          {/* Bottom Right Long Card */}\n          {/* Turned off scroll for now */}\n          {/* <div className=\"scrollWheelContainer\">\n              <Dots Top Right/>\n              <Dots Bottom Right/> */}\n            <div className=\"scrollwheel\">\n              <div className=\"cards\">\n                {Data.Accessories[accessoryTab].Objects.map((data, id) => {\n                  return (\n                    <div key={id} onClick={()=>{EquipAccessory(accessoryTab, id, data.TexChange, data.UID)}} className={equipment[accessoryTab] === id? \"arcard selected\": \"arcard\"}>\n                      <div className=\"artopcard\">\n                        <p className=\"artopp\">\n                          {data.ProductName}\n                        </p>\n                        <img src={InfoPic} onClick={()=>{ShowAnnotations(id)}} alt=\"I\" className={id==annotationSel? \"informationImgSel\":\"informationImg\"} />\n                      </div>\n                      <div className=\"arbottomcard\">\n                        <div className=\"arbottomcardleft\">\n                          <p className='priceTxt'>\n                            ${data.Price}\n                          </p>\n                          <p className='equipTxt'>\n                            {equipment[accessoryTab] === id&& \"EQUIPPED\"}\n                          </p>\n                        </div>\n\n                        <img src={data.URL} alt=\"accessory img\" className=\"Grip1\" />\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          {/* </div> */}\n        </div>\n\n      </div>\n      {/* <p className=\"scroll\">SCROLL</p> */}\n    </div>\n  );\n}\n\nexport default Accessories;\n","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/Profile.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Header.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/LoadingScreen.jsx",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/MobileModal.jsx",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Dots.jsx",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ModelViewerHandler.jsx",["125","126","127"],[],"import React, {useRef, useEffect, useState} from 'react';\n\nimport { SketchFabViewer } from \"./SketchfabViewer\";\nimport { AccessoriesMenuOffset } from './AccessoriesMenuOffset';\nimport { MaterialChange } from './MaterialChange';\nimport { TextureChange } from './TextureChange';\nimport { ModelChange } from './ModelChange';\nimport { Annotations } from './Annotations';\nimport { ObjectVisibility } from './ObjectVisibility';\n\nexport default function ModelViewerHandler(props) {\n\n  const apiRef = useRef(null);\n  const nodes = useRef(null);\n  const itemsCount = useRef(null);\n  const opticsCount = useRef(null);\n  const lightCount = useRef(null);\n  const suppressorCount = useRef(null);\n  const materials = useRef(null);\n  const textures = useRef(null);\n  const annotations = useRef(null);\n\n  //Accessory Tab Hide/Show used to communicate with sketchfab on \n  AccessoriesMenuOffset(props, apiRef);\n  \n  //Change Model/Texture\n  // TextureChange(props, apiRef, materials);//Change individual texture files\n  MaterialChange(props, apiRef, materials, nodes);//Change out entire materials\n  ModelChange(props, apiRef, nodes, itemsCount, opticsCount, lightCount, suppressorCount);\n\n  //Visibility\n  ObjectVisibility(props, apiRef, materials);\n\n  //Annotations\n  Annotations( props, apiRef, annotations );\n\n  return (\n    <SketchFabViewer\n      apiRef={apiRef}\n      nodesRef={nodes}\n      itemsCountRef={itemsCount}\n      opticsCountRef={opticsCount}\n      lightCountRef={lightCount}\n      suppressorCountRef={suppressorCount}\n      materialsRef={materials}\n      texturesRef={textures}\n      annotaionsRef={annotations}\n    ></SketchFabViewer>\n  );\n}\n","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/AccessoriesMenuOffset.jsx",["128","129"],[],"import {useRef, useEffect} from \"react\";\nimport {useIsMount} from \"../useIsMount\";\n\n//Accessory Tab Hide/Show used to communicate with sketchfab viewer\nexport const AccessoriesMenuOffset = (props, apiRef) => {\n  //Function that runs and returns a bool on initial mount\n  const isMount = useIsMount();\n\n  useEffect(() => {\n    if (isMount) {\n      //first mount\n      // console.log('initial mount')\n    } else {\n      //after first mount\n      if (props.AccessoriesMenuVisibility) {\n\n        console.log(\"move to the right\");\n        //TODO This should be dynamic by taking in screen width information for proper offset 0.05 for 2500px and 0.005 for 1440\n        const camMovY = (1 / 1440) * window.innerWidth; //dynamic window width for scaling the movement\n        console.log(camMovY)\n\n        if(props.CameraOffset){\n          //True, so were moving the object to the right and accomodating the suppressor\n\n          //[position, target,duration]\n          console.log('suppressor on')\n          apiRef.current.setCameraLookAt(\n            [-0.4, -0.5, -0.05],//position\n            [0.0, -0.075, -0.00005610803206950726],//target \n            2.0//duration\n          );\n        }else{\n          //False, so were only moving the object to the right. no suppressor accomodation.\n\n          //if suppressor on{ Change position of camera and target }\n          //[position, target,duration]\n          console.log('suppressor off')\n          apiRef.current.setCameraLookAt(\n            [-0.352825848627620646, -0.1, -0.05],//position\n            [0.0, -0.025, -0.00005610803206950726],//target \n            2.0//duration\n          );\n        }\n\n\n      } else {\n        console.log(\"move center\");\n        // apiRef.current.recenterCamera();//Alternative, but it jerks the object into the center view. *unwanted behavior*\n        //TODO This should be dynamic by taking in screen width information for proper centering\n\n        if(props.CameraOffset){\n          //True, so were moving to the center and accomodating the suppressor\n          //[position, target,duration]\n          apiRef.current.setCameraLookAt(\n            [-0.5, -0.085, 0.0],//position\n            [0.0, -0.085, -0.00005610803206950726],//target \n            2.0//duration\n          );\n        }else{\n          //False, so were only moving the object to the center. no suppressor accomodation.\n          apiRef.current.setCameraLookAt(\n            [-0.312825848627620646, -0.025, 0.0],\n            [0.0, -0.025, -0.00005610803206950726],\n            2.0\n          );\n        }\n\n        \n      }\n    }\n  }, [props.AccessoriesMenuVisibility, props.CameraOffset]);\n};\n","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/SketchfabViewer.jsx",["130","131","132","133","134"],[],"import React, {useEffect, useRef, useState} from \"react\";\nimport Annotation from \"../../Images/Annotation.png\";\n\n// import { isMobile } from \"react-device-detect\";\n\n// Our wonderful chair model\n// let MODEL_UID = \"dd210b5271e244bf91b3cfe923aec6bd\";\nlet MODEL_UID = \"3aa1e6eee0834d07abf8ee81f810f754\";\n// 388160ef3a1645f7a54aa39498554cef\n// let MODEL_UID =\"1b718a23d03e48d78366b388e2256eb6\";\n\n// if(isMobile){\n//   MODEL_UID =\"d0073abcaad04f2ab4e7f4f5e9709cef\";\n// }\n\nconst isMobile = false;\n// const BACKGROUND_UID = \"acf263922aa14bba903d46af02101850\";\n\nconst useSketchfabViewer = () => {\n  // This ref will contain the actual iframe object\n  const viewerIframeRef = useRef(null);\n  const [api, setApi] = useState();\n  const [nodes, setNodes] = useState();\n  var [itemsCount, setItemsCount] = useState([]);\n  var [opticsCount, setOpticsCount] = useState([]);\n  var [suppressorCount, setSuppressorCount] = useState([]);\n  var [lightCount, setLightCount] = useState([]);\n  const [materials, setMaterials] = useState();\n  const [textures, setTextures] = useState();\n  const [annotations, setAnnotations] = useState();\n\n  // const [knobNumbers, setKnobNumbers] = useState();\n  // const [hardware, setHardware] = useState();\n  const [camera, setCamera] = useState();\n\n  const [loadFactor, setLoadFactor] = useState(0);\n  const header = document.getElementById(\"load-header\");\n  const accessories = document.getElementById(\"load-accessories\");\n  const splashLogo = document.getElementById(\"splash-loading-img\");\n\n  useEffect(() => {\n    if (loadFactor == 1) {\n      //Fade In\n      splashLogo.setAttribute(\"style\", \"visibility:hidden\");\n\n      header.setAttribute(\"style\", \"opacity: 1; -webkit-animation: fade 2s; animation: fade 2s;\");\n      accessories.setAttribute(\"style\", \"opacity: 1; -webkit-animation: fade 2s; animation: fade 2s;\");\n\n      // apiFrame.setAttribute('style','width: calc(100%+500px)');\n\n      //Splash logo hide\n\n      //Fade Out\n      // header.setAttribute('style','opacity: 0; -webkit-animation: fade 2s; -webkit-animation-direction: reverse; animation: fade 2s; animation-direction: reverse;')\n      // accessories.setAttribute('style','opacity: 0; -webkit-animation: fade 2s; -webkit-animation-direction: reverse; animation: fade 2s; animation-direction: reverse;')\n    }\n  }, [loadFactor]);\n\n  const ViewerIframe = (\n    <iframe\n      id=\"api-frame\"\n      // We feed the ref to the iframe component to get the underlying DOM object\n      ref={viewerIframeRef}\n      allowFullScreen\n      mozallowfullscreen=\"true\"\n      webkitallowfullscreen=\"true\"\n      title=\"sketchfab-viewer\"\n      //   width=\"100vw\"\n      //   height=\"100vh\"\n    />\n  );\n\n  useEffect(() => {\n    // Initialize the viewer\n    let client = new window.Sketchfab(viewerIframeRef.current);\n    client.init(MODEL_UID, {\n      autostart: 1,\n      ui_infos: 0,\n      ui_loading: 0, //removes loading bar for model so we can implement our own\n      annotation_tooltip_visible: 1,\n      annotations_visible: 1,\n      double_click: 0,\n      transparent: 1,\n      // camera: 0,\n      ui_controls: 0,\n      ui_help: 0,\n      ui_hint: 0,\n      ui_stop: 0,\n      ui_watermark: 0,\n      api_log: 1,\n      preload: 1,\n      success: (_api) => {\n        setApi(_api);\n        // console.log(_api)\n\n        //Loading Model\n        _api.addEventListener(\"modelLoadProgress\", function (factor) {\n          // window.console.log(factor.progress);\n          setLoadFactor(factor.progress);\n        });\n        \n        _api.addEventListener(\"viewerready\", () => {\n          _api.getMaterialList(function (err, _materials) {\n            setMaterials(_materials);\n            let _textures = [];\n            let j = 16;\n            for (let i = 0; i < _materials.length; i++) {\n              let m = _materials[i];\n              console.log(m.name, m);\n              _textures[m.name] = m.channels.AlbedoPBR.texture;\n            }\n            setTextures(_textures);\n          });\n\n          if (isMobile) {\n            //If using mobile, set the texture quality to low.\n            _api.setTextureQuality(\"ld\", function (err) {\n              if (!err) {\n                // window.console.log('Texture quality set to low definition');\n              }\n            });\n          } else {\n            _api.setTextureQuality(\"hd\", function (err) {\n              if (!err) {\n                // window.console.log('Texture quality set to high definition');\n              }\n            });\n          }\n          _api.play(function (err) {\n            if (!err) {\n              // window.console.log('Animation playing');\n            }\n          });\n          _api.pause(function (err) {\n            if (!err) {\n              // window.console.log('Animation paused');\n            }\n          });\n          _api.getAnnotationList(function (err, _annotations) {\n            if (!err) {\n              setAnnotations(_annotations);\n              for (let i = 0; i < _annotations.length; i++) {\n                _api.hideAnnotation(i);\n                // if(i==0){\n                //   _api.showAnnotation(0);//show the first annotation if there is one.\n                // }\n              }\n              _api.setAnnotationsTexture(\n                {\n                  // url: \"https://cdn.filestackcontent.com/A6HyqbKrrRoChUMHrEELHz/https://dl.dropboxusercontent.com/s/nz1skyjom3tjq6x/MRLogo.png?dl=0\",\n                  url: Annotation,\n                  iconSize: 64,\n                  colNumber: 10,\n                  padding: 2,\n                },\n                function () {}\n              );\n              // console.log(_annotations);\n            }\n          });\n          _api.getNodeMap(function (err, nodes) {\n            if (!err) {\n              var ICID = []; //All Items\n              var OCID = []; //Optics Items\n              var SCID = []; //Suppressor Items\n              var LCID = []; //Lights Items\n              for (const i in nodes) {\n                if (nodes[i].name) {\n                  // console.log(nodes[i].name);\n                  //make sure theres a name available\n                  if (nodes[i].name.startsWith(\"Accessory\")) {\n\n                    if(nodes[i].name.includes(\"Optic\")){\n                      OCID.push(nodes[i].instanceID);\n                    }else if(nodes[i].name.includes(\"Suppressor\")){\n                      SCID.push(nodes[i].instanceID);\n                    }else if(nodes[i].name.includes(\"Flashlight\")){\n                      LCID.push(nodes[i].instanceID);\n                    }\n\n                    //Additional Items to be turned on/off named \"[NAME]\" in Blender\n                    _api.hide(nodes[i].instanceID);\n                    ICID.push(nodes[i].instanceID);\n                  }\n                }\n              }\n              setItemsCount(ICID);\n              setOpticsCount(OCID);\n              setSuppressorCount(SCID);\n              setLightCount(LCID);\n              setNodes(nodes);\n            }\n          });\n          // _api.addEventListener(\n          //   \"click\",\n          //   function (info) {\n          //     window.console.log(\"click at\", info.position2D);\n          //     if (info.instanceID) {\n          //       // Hit\n          //       // window.console.log('clicked node', info.instanceID);\n          //     }\n          //     // _api.setCameraLookAt( [-0.22976517709999916, -8.068645615899994, 3.308996290299999],\n          //     //  [0.0322999439, 0.4904305136, 2.3266117162], 3 );\n          //   },\n          //   {pick: \"slow\"}\n          // );\n          _api.getCameraLookAt(function (err, _camera) {\n            // setCamera(_camera)\n            console.log(_camera.position); // [x, y, z]\n            console.log(_camera.target); // [x, y, z]\n          });\n          _api.addTexture(\n            \"https://cdn.filestackcontent.com/A6HyqbKrrRoChUMHrEELHz/http://dl.dropboxusercontent.com/s/n9wdc35p0lrzmtf/Glock_Lower_D_Optimized.jpg?dl=0\",\n            function (err, textureId) {\n              // setBodyFront(textureId);\n              // console.log(textureId, err);\n            }\n          );\n        });\n      },\n      error: () => {\n        console.log(\"Viewer error\");\n      },\n    });\n  }, []);\n\n  return [\n    ViewerIframe,\n    api,\n    nodes,\n    itemsCount,\n    opticsCount,\n    lightCount,\n    suppressorCount,\n    materials,\n    textures,\n    annotations\n  ];\n};\n\nexport const SketchFabViewer = ({\n  apiRef,\n  nodesRef,\n  itemsCountRef,\n  opticsCountRef,\n  lightCountRef,\n  suppressorCountRef,\n  materialsRef,\n  texturesRef,\n  annotaionsRef\n}) => {\n  const [\n    ViewerIframe,\n    api,\n    nodes,\n    itemsCount,\n    opticsCount,\n    lightCount,\n    suppressorCount,\n    materials,\n    textures,\n    annotations\n  ] = useSketchfabViewer();\n\n  nodesRef.current = nodes;\n  itemsCountRef.current = itemsCount;\n  opticsCountRef.current = opticsCount;\n  lightCountRef.current = lightCount;\n  suppressorCountRef.current = suppressorCount;\n  materialsRef.current = materials;\n  texturesRef.current = textures;\n  annotaionsRef.current = annotations;\n\n  apiRef.current = api;\n  return ViewerIframe;\n};\n","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/MaterialChange.jsx",["135","136"],[],"//Main\nimport { useRef, useEffect } from 'react';\n\n//Additional Files\nimport { useIsMount } from '../useIsMount';\n\n//*********REFRENCE**************/\n    //props.AccessorySelection[] \n    //AccessorieID(int), ObjectID(int), TextureChange(bool), UID(int)\n//*********REFRENCE**************/\n\nexport const MaterialChange = ( props, apiRef, materials, nodes ) => {\n    // console.log(materials)\n    //Function that runs and returns a bool on initial mount\n    const isMount = useIsMount();\n    useEffect(() => {\n        if(isMount){\n            // console.log('mounting in textureChange')\n        }else{\n            console.log(\"MATCHANGE\")\n            //TODO:Setting this manually is bad and not scalable. This was only done to select the materials within objects that contained multiple materials\n            //In this setup we manually search and store the values of the location of the materials we know will be changed out. \n            const objectsStateID = [4,2,29,1]//[FCU, Base, Slide, Barrel] [Accessories material setID Manually set. \n\n            if(props.AccessorySelection[2]){//confirms that it will be a texture change. (props.AccessorySelection[2] returns true or false)\n\n                //Loop through materials and find changable materials by names. Then we switch their position and replace it with the correct material slot placement. \n                for (var i = 0; i < materials.current.length; i++) {\n                    if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                        if( materials.current[i].name.match(/^\\d/) ){ \n                            if(materials.current[i].name.startsWith(props.AccessorySelection[1])){\n                                materials.current[i].stateSetID  = objectsStateID[props.AccessorySelection[0]]\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    // console.log('Material Assigned')\n                                });\n                            }\n                        }\n                    }\n\n                    //If Reset Configuration is selected.\n                    if(props.AccessorySelection[3] === 1000000){\n                        if(materials.current[i].name.startsWith(0)){\n                            // console.log('all default material')\n                            \n                            materials.current[i].stateSetID  = objectsStateID[materials.current[i].name.charAt(materials.current[i].name.length - 1)]\n                            apiRef.current.setMaterial(materials.current[i], function(err) {\n                                // console.log('Material Assigned')\n                            });\n                        }\n                        // console.log('Reset all materials')\n                    }\n                }\n\n            }else{\n                // console.log('Only model will be changed')\n            }\n        }\n      }, [props.AccessorySelection ]);\n    \n}","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/Annotations.jsx",["137","138"],[],"import { useEffect, useState } from 'react';\nimport { useIsMount } from '../useIsMount';\n\nexport const Annotations = ( props, apiRef, annotations ) => {\n    //Function that runs and returns a bool on initial mount\n    const isMount = useIsMount();\n\n    useEffect(() => {\n        if(isMount){\n          console.log('Mounting in Annotations')\n        }else{\n          //Run code after initial mount\n\n          // console.log(annotations.current.length);\n          if(props.AnnotationVisibility){\n            console.log('Show Annotations')\n            apiRef.current.showAnnotationTooltips();\n          }else{\n            // console.log('Hide Annotations')\n            apiRef.current.hideAnnotationTooltips();\n          }\n          for (var i=0; i<annotations.current.length; i++){\n            if(props.AnnotationVisibility){\n              apiRef.current.showAnnotation(i);\n            }else{\n              apiRef.current.hideAnnotation(i);\n            }\n          }\n        }\n      }, [ props.AnnotationVisibility ]);\n}","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ModelChange.jsx",["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153"],[],"import { useRef, useEffect, useState } from 'react';\nimport { useIsMount } from '../useIsMount';\n\n//*********REFRENCE**************/\n    //props.AccessorySelection[]\n    //AccessorieID(int), ObjectID(int), TextureChange(bool), UID(int)\n//*********REFRENCE**************/\n\nexport const ModelChange = ( props, apiRef, nodes, itemsCount, opticsCount, lightCount, suppressorCount ) => {\n    //Function that runs and returns a bool on initial mount\n    const isMount = useIsMount();\n    const [showing, setShowing] = useState(false);\n    const [ opticSelection, setOpticSelection ] = useState(null)\n    const [ suppressorSelection, setSuppressorSelection ] = useState(null)\n    const [ lightSelection, setLightSelection ] = useState(null)\n\n    useEffect(() => {\n        if(isMount){\n            // console.log('Mounting in modelChange')\n        }else{\n            var m = itemsCount.current;//all items\n            var o = opticsCount.current;//optics items\n            var s = suppressorCount.current;//suppressor items\n            var l = lightCount.current;//light items\n            \n            // console.log(\"Optics:\" + o);\n            // console.log(\"Light:\" + l);\n            // console.log(\"Suppressor:\" + s);\n\n            if(props.AccessorySelection[2]){ //Check to see if its a texture change or model change\n                // console.log('Only texture will be changed or if resetconfig (models will be hidden)')\n                if(props.AccessorySelection[3] === 1000000){//Reset Config\n                    for (var i in m) {\n                        apiRef.current.hide(m[i]);\n                    }\n                    setShowing(false);\n                }\n            }else{//This is a model change\n\n                // console.log(m)\n                // console.log(props)\n                // console.log(props.AccessorySelection[3])\n\n                if(props.AccessorySelection[3].toString().startsWith(\"7\")){ //Optics item\n                    console.log(\"Optics Logic\")\n                    // console.log('test')\n                    // console.log(o)\n                    // console.log(props.AccessorySelection[3])\n                    // console.log((props.AccessorySelection[3] % 10)*2)\n                    var Selection = (props.AccessorySelection[3] % 10)*2;\n                    for (var i in o) {\n                        if(opticSelection == Selection){ //currently selected\n                            apiRef.current.hide(o[i]);\n                            setOpticSelection(null)\n                        }else{\n                            if(Selection == i){\n                                //Show Optics \n                                apiRef.current.show(o[i]);\n                                setOpticSelection(Selection)\n                            }else if(Selection == i-1 ){\n                                //Show Optics second\n                                apiRef.current.show(o[i]);\n                            }else{\n                                //Hide non optics\n                                apiRef.current.hide(o[i]);\n                            }\n                        }\n                    }\n                }else if(props.AccessorySelection[3].toString().startsWith(\"8\")){ //Suppressor item\n                    console.log(\"Suppressor Logic\")\n                    var Selection = (props.AccessorySelection[3] % 10)*2;\n                    for (var j in o) {\n                        if(suppressorSelection == Selection){ //currently selected\n                            apiRef.current.hide(s[j]);\n                            setSuppressorSelection(null)\n                        }else{\n                            if(Selection == j){\n                                //Show Suppressor\n                                apiRef.current.show(s[j]);\n                                setSuppressorSelection(Selection)\n                            }else if(Selection == j-1 ){\n                                //Show Suppressor\n                                apiRef.current.show(s[j]);\n                            }else{\n                                //Hide non suppressor\n                                apiRef.current.hide(s[j]);\n                            }\n                        }\n                    }\n                }else if(props.AccessorySelection[3].toString().startsWith(\"9\")){ //light item\n                    console.log(\"Flashlight Logic\")\n                    var Selection = (props.AccessorySelection[3] % 10)*2;\n                    for (var k in o) {\n                        if(lightSelection == Selection){ //currently selected\n                            console.log('currently selected')\n                            apiRef.current.hide(l[k]);\n                            setLightSelection(null)\n                        }else{\n                            if(Selection == k){\n                                //Show Flashlight\n                                apiRef.current.show(l[k]);\n                                setLightSelection(Selection)\n                            }else if(Selection == k-1 ){\n                                //Show Flashlight\n                                apiRef.current.show(l[k]);\n                            }else{\n                                //Hide non flashlight\n                                apiRef.current.hide(l[k]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n      }, [props.AccessorySelection]);\n}","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/TextureChange.jsx",["154","155","156","157","158","159","160","161","162","163"],[],"//Main\nimport { useRef, useEffect } from 'react';\n\n//Additional Files\nimport { useIsMount } from '../useIsMount';\nimport TextureInfo from '../../api/API_ModelInfo.json'\n\n//*********REFRENCE**************/\n    //props.AccessorySelection[]\n    //AccessorieID(int), ObjectID(int), TextureChange(bool), UID(int)\n//*********REFRENCE**************/\n\n//TODO This can be more dynamic, currently the textures are being \"imported\" every time. That run should be skipped if the texture has beeen imported in the past\n//Additionally, Diffuse, mettalic, roughness and normal assignment code is copy paste....theyre very similar and can be consolidated to smaller code otherwise it's a pain changing in 4 different places. \n//materials are reassigned to all objects at end during reset config. This can be more specific to only the materials that have been changed for less computation. \n//Adding texture change to accessories can add more complication in the future.....\n\nexport const TextureChange = ( props, apiRef, materials ) => {\n    console.log(materials)\n    //Function that runs and returns a bool on initial mount\n    const isMount = useIsMount();\n    useEffect(() => {\n        if(isMount){\n            // console.log('mounting in textureChange')\n        }else{\n            if(props.AccessorySelection[2]){//confirms that it will be a texture change. (props.AccessorySelection[2] returns true or false)\n                var countGlock4 = 0;\n                var DiffuseURL, MetallicURL, RoughnessURL, NormalURL;\n                // console.log(materials)\n\n                // //TODO: we should only add texture if it hasnt been added\n                //Api fetch to retrieve URL information\n                DiffuseURL = TextureInfo.Model[props.AccessorySelection[3]].Diffuse;\n                MetallicURL = TextureInfo.Model[props.AccessorySelection[3]].Metallic;\n                RoughnessURL = TextureInfo.Model[props.AccessorySelection[3]].Roughness;\n                NormalURL = TextureInfo.Model[props.AccessorySelection[3]].Normal;\n                console.log(DiffuseURL)\n                console.log(MetallicURL)\n                console.log(RoughnessURL)\n                console.log(NormalURL)\n\n                //DIFFUSE/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                apiRef.current.addTexture(DiffuseURL, function(err, textureId0) {\n                    //Loop through all materials\n                    for (var i = 0; i < materials.current.length; i++) {\n                            //Check that the material matches the accessory selection\n                            if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                                // console.log(materials.current[i].name)//Specific material we are changing\n                                materials.current[i].channels.AlbedoPBR.texture =  {\n                                    internalFormat: \"RGB\",\n                                    magFilter: \"LINEAR\",\n                                    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                    texCoordUnit: 1,\n                                    textureTarget: \"TEXTURE_2D\",\n                                    uid: textureId0,\n                                    wrapS: \"REPEAT\",\n                                    wrapT: \"REPEAT\"\n                                };\n                            }else if(props.AccessorySelection[3] === 1000000){//ResetConfig\n                                //Check that the material is not an accessoy\n                                if(!materials.current[i].name.includes(\"Accessory\")){\n                                    materials.current[i].channels.AlbedoPBR.texture =  {\n                                        internalFormat: \"RGB\",\n                                        magFilter: \"LINEAR\",\n                                        minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                        texCoordUnit: 1,\n                                        textureTarget: \"TEXTURE_2D\",\n                                        uid: textureId0,\n                                        wrapS: \"REPEAT\",\n                                        wrapT: \"REPEAT\"\n                                    };\n                                }else{\n                                    //the material belongs to an accessory\n                                }\n                            }\n                    }\n                    countGlock4++; //This is to check that it is the last texture being updated otherwise continue assigning the textures and the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n                    if (countGlock4 == 4){\n                    //Loop through the material to update the specific material\n                    for (var i = 0; i < materials.current.length; i++) {\n                        //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n                        if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                            apiRef.current.setMaterial(materials.current[i], function(err) {\n                                console.log('Material Assigned')\n                            });\n                        }else if(props.AccessorySelection[3] === 1000000){\n                            apiRef.current.setMaterial(materials.current[i], function(err) {\n                                console.log('Material Assigned')\n                            });\n                        }\n                    }\n                    }\n                });\n\n                //METALLIC/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                apiRef.current.addTexture(MetallicURL, function(err, textureId1) {\n                    for (var i = 0; i < materials.current.length; i++) {\n                        //Here is where we choose to assign for specific material\n                        if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                            materials.current[i].channels.MetalnessPBR.texture = {\n                                internalFormat: \"RGB\",\n                                magFilter: \"LINEAR\",\n                                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                texCoordUnit: 1,\n                                textureTarget: \"TEXTURE_2D\",\n                                uid: textureId1,\n                                wrapS: \"REPEAT\",\n                                wrapT: \"REPEAT\"\n                            };\n                        }else if(props.AccessorySelection[3] === 1000000){\n                            //Check that the material is not an accessoy\n                            if(!materials.current[i].name.includes(\"Accessory\")){\n                                materials.current[i].channels.MetalnessPBR.texture = {\n                                    internalFormat: \"RGB\",\n                                    magFilter: \"LINEAR\",\n                                    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                    texCoordUnit: 1,\n                                    textureTarget: \"TEXTURE_2D\",\n                                    uid: textureId1,\n                                    wrapS: \"REPEAT\",\n                                    wrapT: \"REPEAT\"\n                                };\n                            }else{\n                                //the material belongs to an accessory\n                            }\n                        }\n                    }\n                    countGlock4++; //This is to check that it is the last texture being updated otherwise continue the assigning the textures the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n                    if (countGlock4 == 4){\n                        //Loop through the material to update the specific material\n                        for (var i = 0; i < materials.current.length; i++) {\n                            //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n\n                            if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }else if(props.AccessorySelection[3] === 1000000){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }\n                        }\n                    }\n                });\n\n                //ROUGHNESS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                apiRef.current.addTexture(RoughnessURL, function(err, textureId2) {\n                    //This is where the texture is assigned to the material the \"mat\" stands for material.\n                    for (var i = 0; i < materials.current.length; i++) {\n                        //Here is where we choose to assign for specific material\n                        if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                            materials.current[i].channels.RoughnessPBR.texture =  {\n                                internalFormat: \"RGB\",\n                                magFilter: \"LINEAR\",\n                                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                texCoordUnit: 1,\n                                textureTarget: \"TEXTURE_2D\",\n                                uid: textureId2,\n                                wrapS: \"REPEAT\",\n                                wrapT: \"REPEAT\"\n                            };\n                        }else if(props.AccessorySelection[3] === 1000000){\n                            //Check that the material is not an accessoy\n                            if(!materials.current[i].name.includes(\"Accessory\")){\n                                materials.current[i].channels.RoughnessPBR.texture =  {\n                                    internalFormat: \"RGB\",\n                                    magFilter: \"LINEAR\",\n                                    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                    texCoordUnit: 1,\n                                    textureTarget: \"TEXTURE_2D\",\n                                    uid: textureId2,\n                                    wrapS: \"REPEAT\",\n                                    wrapT: \"REPEAT\"\n                                };\n                            }else{\n                                //the material belongs to an accessory\n                            }\n                        }\n                    }\n\n                    countGlock4++; //This is to check that it is the last texture being updated otherwise continue the assigning the textures the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n                    if (countGlock4 == 4){\n                        //Loop through the material to update the specific material\n                        for (var i = 0; i < materials.current.length; i++) {\n                            //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n                            if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }else if(props.AccessorySelection[3] === 1000000){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }\n                        }\n                    }\n                });\n\n                //NORMAL////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                apiRef.current.addTexture(NormalURL, function(err, textureId3) {\n                    //This is where the texture is assigned to the material the \"mat\" stands for material.\n                    for (var i = 0; i < materials.current.length; i++) {\n                        //Here is where we choose to assign for specific material\n                        if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                            materials.current[i].channels.NormalMap.texture =  {\n                                internalFormat: \"RGB\",\n                                magFilter: \"LINEAR\",\n                                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                texCoordUnit: 1,\n                                textureTarget: \"TEXTURE_2D\",\n                                uid: textureId3,\n                                wrapS: \"REPEAT\",\n                                wrapT: \"REPEAT\"\n                            };\n                        }else if(props.AccessorySelection[3] === 1000000){\n                            //Check that the material is not an accessoy\n                            if(!materials.current[i].name.includes(\"Accessory\")){\n                                materials.current[i].channels.NormalMap.texture =  {\n                                    internalFormat: \"RGB\",\n                                    magFilter: \"LINEAR\",\n                                    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                    texCoordUnit: 1,\n                                    textureTarget: \"TEXTURE_2D\",\n                                    uid: textureId3,\n                                    wrapS: \"REPEAT\",\n                                    wrapT: \"REPEAT\"\n                                };\n                            }else{\n                                //the material belongs to an accessory\n                            }\n                        }\n                    }\n\n                    countGlock4++; //This is to check that it is the last texture being updated otherwise continue the assigning the textures the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n                    if (countGlock4 == 4){\n                        //Loop through the material to update the specific material\n                        for (var i = 0; i < materials.current.length; i++) {\n                            //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n                            if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }else if(props.AccessorySelection[3] === 1000000){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }\n                        }\n                    }\n                });\n            }else{\n                // console.log('Only model will be changed')\n            }\n        }\n      }, [props.AccessorySelection]);\n    \n}","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ObjectVisibility.jsx",["164","165","166"],[],"import { useEffect, useState } from 'react';\nimport { useIsMount } from '../useIsMount';\nimport { MaterialChange } from './MaterialChange';\n\nexport const ObjectVisibility = ( props, apiRef, materials ) => {\n    //Function that runs and returns a bool on initial mount\n    const isMount = useIsMount();\n\n    let objTexture = {\n        internalFormat: \"RGB\",\n        magFilter: \"LINEAR\",\n        minFilter: \"LINEAR_MIPMAP_LINEAR\",\n        texCoordUnit: 1,\n        textureTarget: \"TEXTURE_2D\",\n        uid: \"\",\n        wrapS: \"REPEAT\",\n        wrapT: \"REPEAT\"\n    };\n\n    const objectsStateID = [4,2,18,1]//Accessories material setID Manually set. \n    useEffect(() => {\n        if(isMount){\n            console.log('Mounting in ObjectVisibility')\n        }else{\n            //Run code after initial mount     \n\n            console.log(props)\n            for (var i = 0; i < materials.current.length; i++) {\n                //save out materials\n                var m = materials.current[i];\n                if(props.AccessoryVisibility===9){//special index indicating fully visible object\n                    m.channels.Opacity = {\n                        enable: true,\n                        factor: 1.0,\n                        type:\"dithering\",\n                        objTexture\n                    };\n\n                    if(m.name.includes(\"OpticB\")){\n                        m.channels.Opacity = {\n                            enable: true,\n                            factor: 0,\n                            type:\"refraction\",\n                            objTexture\n                        };\n                    }\n\n                    apiRef.current.setMaterial(materials.current[i], function(err) {\n                    });\n                    //TODO Bad hardcoded method\n                    // if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                    //     if( materials.current[i].name.match(/^\\d/) ){ \n                    //         if(materials.current[i].name.startsWith(props.AccessorySelection[1])){\n\n                    //             console.log('Material Assigned')\n                    //             console.log(materials.current[i].name)\n                    //             console.log(\"Its this accessory that should be getting changed: \"+ props.AccessorySelection[1])\n                    //             console.log(\"From this tab: \"+ props.AccessorySelection[0])\n\n                    //             materials.current[i].stateSetID  = objectsStateID[props.AccessorySelection[0]]\n                    //             apiRef.current.setMaterial(materials.current[i], function(err) {\n                    //             });\n                    //         }\n                    //     }\n                    // }else{\n                    //     apiRef.current.setMaterial(materials.current[i], function(err) {\n                    //     });\n                    // }\n                }else{\n                    //Check that the material selected is for the correct accessory being focused on\n                    if(!m.name.endsWith(props.AccessoryVisibility)){\n                        //All other non-focused objects\n                        m.channels.Opacity = {\n                            enable:true,\n                            factor: 0.1,\n                            type:\"dithering\",\n                            objTexture\n                        };\n                        // //finally set the new material.\n                        apiRef.current.setMaterial(m, function(err) {\n                            // console.log(err);\n                        });\n                    }else{\n                        //Focused Object\n                        m.channels.Opacity = {\n                            enable: true,\n                            factor: 1.0,\n                            type:\"dithering\",\n                            objTexture\n                        };\n                        if(m.name.includes(\"OpticB\")){\n                            m.channels.Opacity = {\n                                enable: true,\n                                factor: 0,\n                                type:\"refraction\",\n                                objTexture\n                            };\n                        }\n                        //TODO Bad hardcoded method\n                        if(materials.current[i].name.endsWith(props.AccessoryVisibility)){\n                            if( materials.current[i].name.match(/^\\d/) ){ \n                                if(materials.current[i].name.startsWith(props.AccessorySelection[1])){\n                                    console.log('Material Assigned')\n                                    console.log(materials.current[i].name)\n                                    console.log(\"Its this accessory that should be getting changed: \"+ props.AccessorySelection[1])\n                                    console.log(\"From this tab: \"+ props.AccessorySelection[0])\n\n                                    materials.current[i].stateSetID  = objectsStateID[props.AccessoryVisibility]\n                                    apiRef.current.setMaterial(materials.current[i], function(err) {\n                                        console.log('Material Assigned')\n                                    });\n                                }\n                            }\n                        }\n\n                    }\n                }\n\n\n            }\n        }\n        \n\n            \n      }, [ props.AccessoryVisibility ]);\n}","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/useIsMount.jsx",[],[],{"ruleId":"167","severity":1,"message":"168","line":4,"column":8,"nodeType":"169","messageId":"170","endLine":4,"endColumn":13},{"ruleId":"171","severity":1,"message":"172","line":63,"column":39,"nodeType":"173","messageId":"174","endLine":63,"endColumn":41},{"ruleId":"171","severity":1,"message":"172","line":172,"column":101,"nodeType":"173","messageId":"174","endLine":172,"endColumn":103},{"ruleId":"167","severity":1,"message":"175","line":1,"column":24,"nodeType":"169","messageId":"170","endLine":1,"endColumn":33},{"ruleId":"167","severity":1,"message":"176","line":1,"column":35,"nodeType":"169","messageId":"170","endLine":1,"endColumn":43},{"ruleId":"167","severity":1,"message":"177","line":6,"column":10,"nodeType":"169","messageId":"170","endLine":6,"endColumn":23},{"ruleId":"167","severity":1,"message":"178","line":1,"column":9,"nodeType":"169","messageId":"170","endLine":1,"endColumn":15},{"ruleId":"179","severity":1,"message":"180","line":71,"column":6,"nodeType":"181","endLine":71,"endColumn":59,"suggestions":"182"},{"ruleId":"167","severity":1,"message":"183","line":34,"column":10,"nodeType":"169","messageId":"170","endLine":34,"endColumn":16},{"ruleId":"167","severity":1,"message":"184","line":34,"column":18,"nodeType":"169","messageId":"170","endLine":34,"endColumn":27},{"ruleId":"171","severity":1,"message":"172","line":42,"column":20,"nodeType":"173","messageId":"174","endLine":42,"endColumn":22},{"ruleId":"179","severity":1,"message":"185","line":57,"column":6,"nodeType":"181","endLine":57,"endColumn":18,"suggestions":"186"},{"ruleId":"167","severity":1,"message":"187","line":106,"column":17,"nodeType":"169","messageId":"170","endLine":106,"endColumn":18},{"ruleId":"167","severity":1,"message":"178","line":2,"column":10,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"179","severity":1,"message":"188","line":58,"column":10,"nodeType":"181","endLine":58,"endColumn":37,"suggestions":"189"},{"ruleId":"167","severity":1,"message":"176","line":1,"column":21,"nodeType":"169","messageId":"170","endLine":1,"endColumn":29},{"ruleId":"179","severity":1,"message":"190","line":30,"column":10,"nodeType":"181","endLine":30,"endColumn":40,"suggestions":"191"},{"ruleId":"167","severity":1,"message":"178","line":1,"column":10,"nodeType":"169","messageId":"170","endLine":1,"endColumn":16},{"ruleId":"167","severity":1,"message":"192","line":12,"column":12,"nodeType":"169","messageId":"170","endLine":12,"endColumn":19},{"ruleId":"193","severity":1,"message":"194","line":51,"column":30,"nodeType":"169","messageId":"195","endLine":51,"endColumn":31},{"ruleId":"171","severity":1,"message":"172","line":52,"column":43,"nodeType":"173","messageId":"174","endLine":52,"endColumn":45},{"ruleId":"171","severity":1,"message":"172","line":56,"column":42,"nodeType":"173","messageId":"174","endLine":56,"endColumn":44},{"ruleId":"171","severity":1,"message":"172","line":60,"column":48,"nodeType":"173","messageId":"174","endLine":60,"endColumn":50},{"ruleId":"193","severity":1,"message":"196","line":71,"column":25,"nodeType":"169","messageId":"195","endLine":71,"endColumn":34},{"ruleId":"171","severity":1,"message":"172","line":73,"column":48,"nodeType":"173","messageId":"174","endLine":73,"endColumn":50},{"ruleId":"171","severity":1,"message":"172","line":77,"column":42,"nodeType":"173","messageId":"174","endLine":77,"endColumn":44},{"ruleId":"171","severity":1,"message":"172","line":81,"column":48,"nodeType":"173","messageId":"174","endLine":81,"endColumn":50},{"ruleId":"193","severity":1,"message":"196","line":92,"column":25,"nodeType":"169","messageId":"195","endLine":92,"endColumn":34},{"ruleId":"171","severity":1,"message":"172","line":94,"column":43,"nodeType":"173","messageId":"174","endLine":94,"endColumn":45},{"ruleId":"171","severity":1,"message":"172","line":99,"column":42,"nodeType":"173","messageId":"174","endLine":99,"endColumn":44},{"ruleId":"171","severity":1,"message":"172","line":103,"column":48,"nodeType":"173","messageId":"174","endLine":103,"endColumn":50},{"ruleId":"179","severity":1,"message":"197","line":115,"column":10,"nodeType":"181","endLine":115,"endColumn":36,"suggestions":"198"},{"ruleId":"167","severity":1,"message":"178","line":2,"column":10,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":78,"column":37,"nodeType":"173","messageId":"174","endLine":78,"endColumn":39},{"ruleId":"193","severity":1,"message":"194","line":80,"column":30,"nodeType":"169","messageId":"195","endLine":80,"endColumn":31},{"ruleId":"171","severity":1,"message":"172","line":129,"column":37,"nodeType":"173","messageId":"174","endLine":129,"endColumn":39},{"ruleId":"193","severity":1,"message":"194","line":131,"column":34,"nodeType":"169","messageId":"195","endLine":131,"endColumn":35},{"ruleId":"171","severity":1,"message":"172","line":183,"column":37,"nodeType":"173","messageId":"174","endLine":183,"endColumn":39},{"ruleId":"193","severity":1,"message":"194","line":185,"column":34,"nodeType":"169","messageId":"195","endLine":185,"endColumn":35},{"ruleId":"171","severity":1,"message":"172","line":236,"column":37,"nodeType":"173","messageId":"174","endLine":236,"endColumn":39},{"ruleId":"193","severity":1,"message":"194","line":238,"column":34,"nodeType":"169","messageId":"195","endLine":238,"endColumn":35},{"ruleId":"179","severity":1,"message":"188","line":256,"column":10,"nodeType":"181","endLine":256,"endColumn":36,"suggestions":"199"},{"ruleId":"167","severity":1,"message":"176","line":1,"column":21,"nodeType":"169","messageId":"170","endLine":1,"endColumn":29},{"ruleId":"167","severity":1,"message":"200","line":3,"column":10,"nodeType":"169","messageId":"170","endLine":3,"endColumn":24},{"ruleId":"179","severity":1,"message":"201","line":125,"column":10,"nodeType":"181","endLine":125,"endColumn":39,"suggestions":"202"},"no-unused-vars","'Check' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'useState' is defined but never used.","'TextureChange' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'apiRef' and 'isMount'. Either include them or remove the dependency array.","ArrayExpression",["203"],"'camera' is assigned a value but never used.","'setCamera' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'accessories', 'header', and 'splashLogo'. Either include them or remove the dependency array.",["204"],"'j' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'apiRef', 'isMount', and 'materials'. Either include them or remove the dependency array.",["205"],"React Hook useEffect has missing dependencies: 'annotations', 'apiRef', and 'isMount'. Either include them or remove the dependency array.",["206"],"'showing' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'Selection' is already defined.","React Hook useEffect has missing dependencies: 'apiRef', 'isMount', 'itemsCount', 'lightCount', 'lightSelection', 'opticSelection', 'opticsCount', 'suppressorCount', and 'suppressorSelection'. Either include them or remove the dependency array.",["207"],["208"],"'MaterialChange' is defined but never used.","React Hook useEffect has missing dependencies: 'apiRef', 'isMount', 'materials', 'objTexture', 'objectsStateID', and 'props'. Either include them or remove the dependency array.",["209"],{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"214","fix":"220"},{"desc":"221","fix":"222"},"Update the dependencies array to be: [apiRef, isMount, props.AccessoriesMenuVisibility, props.CameraOffset]",{"range":"223","text":"224"},"Update the dependencies array to be: [accessories, header, loadFactor, splashLogo]",{"range":"225","text":"226"},"Update the dependencies array to be: [apiRef, isMount, materials, props.AccessorySelection]",{"range":"227","text":"228"},"Update the dependencies array to be: [annotations, apiRef, isMount, props.AnnotationVisibility]",{"range":"229","text":"230"},"Update the dependencies array to be: [apiRef, isMount, itemsCount, lightCount, lightSelection, opticSelection, opticsCount, props.AccessorySelection, suppressorCount, suppressorSelection]",{"range":"231","text":"232"},{"range":"233","text":"228"},"Update the dependencies array to be: [apiRef, isMount, materials, objTexture, objectsStateID, props, props.AccessoryVisibility]",{"range":"234","text":"235"},[2575,2628],"[apiRef, isMount, props.AccessoriesMenuVisibility, props.CameraOffset]",[2299,2311],"[accessories, header, loadFactor, splashLogo]",[2950,2977],"[apiRef, isMount, materials, props.AccessorySelection]",[984,1014],"[annotations, apiRef, isMount, props.AnnotationVisibility]",[5437,5463],"[apiRef, isMount, itemsCount, lightCount, lightSelection, opticSelection, opticsCount, props.AccessorySelection, suppressorCount, suppressorSelection]",[16313,16339],[5470,5499],"[apiRef, isMount, materials, objTexture, objectsStateID, props, props.AccessoryVisibility]"]