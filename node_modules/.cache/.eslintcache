[{"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/index.js":"1","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Layout.js":"2","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/reportWebVitals.js":"3","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/App.js":"4","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/MyVault.js":"5","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/CheckOut.js":"6","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/Community.js":"7","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Accessories.js":"8","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/Profile.js":"9","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Header.js":"10","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/LoadingScreen.jsx":"11","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/MobileModal.jsx":"12","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Dots.jsx":"13","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ModelViewerHandler.jsx":"14","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/AccessoriesMenuOffset.jsx":"15","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/SketchfabViewer.jsx":"16","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/MaterialChange.jsx":"17","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/Annotations.jsx":"18","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ModelChange.jsx":"19","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/TextureChange.jsx":"20","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ObjectVisibility.jsx":"21","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/useIsMount.jsx":"22"},{"size":572,"mtime":1694745173423,"results":"23","hashOfConfig":"24"},{"size":1031,"mtime":1691686041263,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1690920244524,"results":"26","hashOfConfig":"24"},{"size":1997,"mtime":1704226497021,"results":"27","hashOfConfig":"24"},{"size":578,"mtime":1692110352146,"results":"28","hashOfConfig":"24"},{"size":586,"mtime":1692110236754,"results":"29","hashOfConfig":"24"},{"size":130,"mtime":1691072287477,"results":"30","hashOfConfig":"24"},{"size":4025,"mtime":1704226497023,"results":"31","hashOfConfig":"24"},{"size":111,"mtime":1691072287478,"results":"32","hashOfConfig":"24"},{"size":3299,"mtime":1704226947524,"results":"33","hashOfConfig":"24"},{"size":441,"mtime":1696016757585,"results":"34","hashOfConfig":"24"},{"size":439,"mtime":1696016758830,"results":"35","hashOfConfig":"24"},{"size":425,"mtime":1691011667523,"results":"36","hashOfConfig":"24"},{"size":1643,"mtime":1703888383269,"results":"37","hashOfConfig":"24"},{"size":1687,"mtime":1704226685219,"results":"38","hashOfConfig":"24"},{"size":9069,"mtime":1704226727174,"results":"39","hashOfConfig":"24"},{"size":2958,"mtime":1704226497022,"results":"40","hashOfConfig":"24"},{"size":1018,"mtime":1691698427638,"results":"41","hashOfConfig":"24"},{"size":5467,"mtime":1703738549390,"results":"42","hashOfConfig":"24"},{"size":16348,"mtime":1703738549391,"results":"43","hashOfConfig":"24"},{"size":5504,"mtime":1704226497022,"results":"44","hashOfConfig":"24"},{"size":206,"mtime":1691172193352,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qnwg19",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/index.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Layout.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/reportWebVitals.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/App.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/MyVault.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/CheckOut.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/Community.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Accessories.js",["115","116","117","118","119","120","121","122","123","124","125"],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Pages/Profile.js",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Header.js",["126","127","128"],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/LoadingScreen.jsx",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/MobileModal.jsx",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Dots.jsx",[],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ModelViewerHandler.jsx",["129","130","131"],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/AccessoriesMenuOffset.jsx",["132","133"],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/SketchfabViewer.jsx",["134","135","136","137","138"],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/MaterialChange.jsx",["139","140"],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/Annotations.jsx",["141","142"],[],"import { useEffect, useState } from 'react';\nimport { useIsMount } from '../useIsMount';\n\nexport const Annotations = ( props, apiRef, annotations ) => {\n    //Function that runs and returns a bool on initial mount\n    const isMount = useIsMount();\n\n    useEffect(() => {\n        if(isMount){\n          console.log('Mounting in Annotations')\n        }else{\n          //Run code after initial mount\n\n          // console.log(annotations.current.length);\n          if(props.AnnotationVisibility){\n            console.log('Show Annotations')\n            apiRef.current.showAnnotationTooltips();\n          }else{\n            // console.log('Hide Annotations')\n            apiRef.current.hideAnnotationTooltips();\n          }\n          for (var i=0; i<annotations.current.length; i++){\n            if(props.AnnotationVisibility){\n              apiRef.current.showAnnotation(i);\n            }else{\n              apiRef.current.hideAnnotation(i);\n            }\n          }\n        }\n      }, [ props.AnnotationVisibility ]);\n}","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ModelChange.jsx",["143","144","145","146","147","148","149","150","151","152","153","154","155","156","157"],[],"import { useRef, useEffect, useState } from 'react';\nimport { useIsMount } from '../useIsMount';\n\n//*********REFRENCE**************/\n    //props.AccessorySelection[]\n    //AccessorieID(int), ObjectID(int), TextureChange(bool), UID(int)\n//*********REFRENCE**************/\n\nexport const ModelChange = ( props, apiRef, nodes, itemsCount, opticsCount, lightCount, suppressorCount ) => {\n    //Function that runs and returns a bool on initial mount\n    const isMount = useIsMount();\n    const [showing, setShowing] = useState(false);\n    const [ opticSelection, setOpticSelection ] = useState(null)\n    const [ suppressorSelection, setSuppressorSelection ] = useState(null)\n    const [ lightSelection, setLightSelection ] = useState(null)\n\n    useEffect(() => {\n        if(isMount){\n            // console.log('Mounting in modelChange')\n        }else{\n            var m = itemsCount.current;//all items\n            var o = opticsCount.current;//optics items\n            var s = suppressorCount.current;//suppressor items\n            var l = lightCount.current;//light items\n            \n            // console.log(\"Optics:\" + o);\n            // console.log(\"Light:\" + l);\n            // console.log(\"Suppressor:\" + s);\n\n            if(props.AccessorySelection[2]){ //Check to see if its a texture change or model change\n                // console.log('Only texture will be changed or if resetconfig (models will be hidden)')\n                if(props.AccessorySelection[3] === 1000000){//Reset Config\n                    for (var i in m) {\n                        apiRef.current.hide(m[i]);\n                    }\n                    setShowing(false);\n                }\n            }else{//This is a model change\n\n                // console.log(m)\n                // console.log(props)\n                // console.log(props.AccessorySelection[3])\n\n                if(props.AccessorySelection[3].toString().startsWith(\"7\")){ //Optics item\n                    console.log(\"Optics Logic\")\n                    // console.log('test')\n                    // console.log(o)\n                    // console.log(props.AccessorySelection[3])\n                    // console.log((props.AccessorySelection[3] % 10)*2)\n                    var Selection = (props.AccessorySelection[3] % 10)*2;\n                    for (var i in o) {\n                        if(opticSelection == Selection){ //currently selected\n                            apiRef.current.hide(o[i]);\n                            setOpticSelection(null)\n                        }else{\n                            if(Selection == i){\n                                //Show Optics \n                                apiRef.current.show(o[i]);\n                                setOpticSelection(Selection)\n                            }else if(Selection == i-1 ){\n                                //Show Optics second\n                                apiRef.current.show(o[i]);\n                            }else{\n                                //Hide non optics\n                                apiRef.current.hide(o[i]);\n                            }\n                        }\n                    }\n                }else if(props.AccessorySelection[3].toString().startsWith(\"8\")){ //Suppressor item\n                    console.log(\"Suppressor Logic\")\n                    var Selection = (props.AccessorySelection[3] % 10)*2;\n                    for (var j in o) {\n                        if(suppressorSelection == Selection){ //currently selected\n                            apiRef.current.hide(s[j]);\n                            setSuppressorSelection(null)\n                        }else{\n                            if(Selection == j){\n                                //Show Suppressor\n                                apiRef.current.show(s[j]);\n                                setSuppressorSelection(Selection)\n                            }else if(Selection == j-1 ){\n                                //Show Suppressor\n                                apiRef.current.show(s[j]);\n                            }else{\n                                //Hide non suppressor\n                                apiRef.current.hide(s[j]);\n                            }\n                        }\n                    }\n                }else if(props.AccessorySelection[3].toString().startsWith(\"9\")){ //light item\n                    console.log(\"Flashlight Logic\")\n                    var Selection = (props.AccessorySelection[3] % 10)*2;\n                    for (var k in o) {\n                        if(lightSelection == Selection){ //currently selected\n                            console.log('currently selected')\n                            apiRef.current.hide(l[k]);\n                            setLightSelection(null)\n                        }else{\n                            if(Selection == k){\n                                //Show Flashlight\n                                apiRef.current.show(l[k]);\n                                setLightSelection(Selection)\n                            }else if(Selection == k-1 ){\n                                //Show Flashlight\n                                apiRef.current.show(l[k]);\n                            }else{\n                                //Hide non flashlight\n                                apiRef.current.hide(l[k]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n      }, [props.AccessorySelection]);\n}","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/TextureChange.jsx",["158","159","160","161","162","163","164","165","166","167"],[],"//Main\nimport { useRef, useEffect } from 'react';\n\n//Additional Files\nimport { useIsMount } from '../useIsMount';\nimport TextureInfo from '../../api/API_ModelInfo.json'\n\n//*********REFRENCE**************/\n    //props.AccessorySelection[]\n    //AccessorieID(int), ObjectID(int), TextureChange(bool), UID(int)\n//*********REFRENCE**************/\n\n//TODO This can be more dynamic, currently the textures are being \"imported\" every time. That run should be skipped if the texture has beeen imported in the past\n//Additionally, Diffuse, mettalic, roughness and normal assignment code is copy paste....theyre very similar and can be consolidated to smaller code otherwise it's a pain changing in 4 different places. \n//materials are reassigned to all objects at end during reset config. This can be more specific to only the materials that have been changed for less computation. \n//Adding texture change to accessories can add more complication in the future.....\n\nexport const TextureChange = ( props, apiRef, materials ) => {\n    console.log(materials)\n    //Function that runs and returns a bool on initial mount\n    const isMount = useIsMount();\n    useEffect(() => {\n        if(isMount){\n            // console.log('mounting in textureChange')\n        }else{\n            if(props.AccessorySelection[2]){//confirms that it will be a texture change. (props.AccessorySelection[2] returns true or false)\n                var countGlock4 = 0;\n                var DiffuseURL, MetallicURL, RoughnessURL, NormalURL;\n                // console.log(materials)\n\n                // //TODO: we should only add texture if it hasnt been added\n                //Api fetch to retrieve URL information\n                DiffuseURL = TextureInfo.Model[props.AccessorySelection[3]].Diffuse;\n                MetallicURL = TextureInfo.Model[props.AccessorySelection[3]].Metallic;\n                RoughnessURL = TextureInfo.Model[props.AccessorySelection[3]].Roughness;\n                NormalURL = TextureInfo.Model[props.AccessorySelection[3]].Normal;\n                console.log(DiffuseURL)\n                console.log(MetallicURL)\n                console.log(RoughnessURL)\n                console.log(NormalURL)\n\n                //DIFFUSE/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                apiRef.current.addTexture(DiffuseURL, function(err, textureId0) {\n                    //Loop through all materials\n                    for (var i = 0; i < materials.current.length; i++) {\n                            //Check that the material matches the accessory selection\n                            if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                                // console.log(materials.current[i].name)//Specific material we are changing\n                                materials.current[i].channels.AlbedoPBR.texture =  {\n                                    internalFormat: \"RGB\",\n                                    magFilter: \"LINEAR\",\n                                    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                    texCoordUnit: 1,\n                                    textureTarget: \"TEXTURE_2D\",\n                                    uid: textureId0,\n                                    wrapS: \"REPEAT\",\n                                    wrapT: \"REPEAT\"\n                                };\n                            }else if(props.AccessorySelection[3] === 1000000){//ResetConfig\n                                //Check that the material is not an accessoy\n                                if(!materials.current[i].name.includes(\"Accessory\")){\n                                    materials.current[i].channels.AlbedoPBR.texture =  {\n                                        internalFormat: \"RGB\",\n                                        magFilter: \"LINEAR\",\n                                        minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                        texCoordUnit: 1,\n                                        textureTarget: \"TEXTURE_2D\",\n                                        uid: textureId0,\n                                        wrapS: \"REPEAT\",\n                                        wrapT: \"REPEAT\"\n                                    };\n                                }else{\n                                    //the material belongs to an accessory\n                                }\n                            }\n                    }\n                    countGlock4++; //This is to check that it is the last texture being updated otherwise continue assigning the textures and the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n                    if (countGlock4 == 4){\n                    //Loop through the material to update the specific material\n                    for (var i = 0; i < materials.current.length; i++) {\n                        //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n                        if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                            apiRef.current.setMaterial(materials.current[i], function(err) {\n                                console.log('Material Assigned')\n                            });\n                        }else if(props.AccessorySelection[3] === 1000000){\n                            apiRef.current.setMaterial(materials.current[i], function(err) {\n                                console.log('Material Assigned')\n                            });\n                        }\n                    }\n                    }\n                });\n\n                //METALLIC/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                apiRef.current.addTexture(MetallicURL, function(err, textureId1) {\n                    for (var i = 0; i < materials.current.length; i++) {\n                        //Here is where we choose to assign for specific material\n                        if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                            materials.current[i].channels.MetalnessPBR.texture = {\n                                internalFormat: \"RGB\",\n                                magFilter: \"LINEAR\",\n                                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                texCoordUnit: 1,\n                                textureTarget: \"TEXTURE_2D\",\n                                uid: textureId1,\n                                wrapS: \"REPEAT\",\n                                wrapT: \"REPEAT\"\n                            };\n                        }else if(props.AccessorySelection[3] === 1000000){\n                            //Check that the material is not an accessoy\n                            if(!materials.current[i].name.includes(\"Accessory\")){\n                                materials.current[i].channels.MetalnessPBR.texture = {\n                                    internalFormat: \"RGB\",\n                                    magFilter: \"LINEAR\",\n                                    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                    texCoordUnit: 1,\n                                    textureTarget: \"TEXTURE_2D\",\n                                    uid: textureId1,\n                                    wrapS: \"REPEAT\",\n                                    wrapT: \"REPEAT\"\n                                };\n                            }else{\n                                //the material belongs to an accessory\n                            }\n                        }\n                    }\n                    countGlock4++; //This is to check that it is the last texture being updated otherwise continue the assigning the textures the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n                    if (countGlock4 == 4){\n                        //Loop through the material to update the specific material\n                        for (var i = 0; i < materials.current.length; i++) {\n                            //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n\n                            if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }else if(props.AccessorySelection[3] === 1000000){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }\n                        }\n                    }\n                });\n\n                //ROUGHNESS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                apiRef.current.addTexture(RoughnessURL, function(err, textureId2) {\n                    //This is where the texture is assigned to the material the \"mat\" stands for material.\n                    for (var i = 0; i < materials.current.length; i++) {\n                        //Here is where we choose to assign for specific material\n                        if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                            materials.current[i].channels.RoughnessPBR.texture =  {\n                                internalFormat: \"RGB\",\n                                magFilter: \"LINEAR\",\n                                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                texCoordUnit: 1,\n                                textureTarget: \"TEXTURE_2D\",\n                                uid: textureId2,\n                                wrapS: \"REPEAT\",\n                                wrapT: \"REPEAT\"\n                            };\n                        }else if(props.AccessorySelection[3] === 1000000){\n                            //Check that the material is not an accessoy\n                            if(!materials.current[i].name.includes(\"Accessory\")){\n                                materials.current[i].channels.RoughnessPBR.texture =  {\n                                    internalFormat: \"RGB\",\n                                    magFilter: \"LINEAR\",\n                                    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                    texCoordUnit: 1,\n                                    textureTarget: \"TEXTURE_2D\",\n                                    uid: textureId2,\n                                    wrapS: \"REPEAT\",\n                                    wrapT: \"REPEAT\"\n                                };\n                            }else{\n                                //the material belongs to an accessory\n                            }\n                        }\n                    }\n\n                    countGlock4++; //This is to check that it is the last texture being updated otherwise continue the assigning the textures the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n                    if (countGlock4 == 4){\n                        //Loop through the material to update the specific material\n                        for (var i = 0; i < materials.current.length; i++) {\n                            //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n                            if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }else if(props.AccessorySelection[3] === 1000000){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }\n                        }\n                    }\n                });\n\n                //NORMAL////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                apiRef.current.addTexture(NormalURL, function(err, textureId3) {\n                    //This is where the texture is assigned to the material the \"mat\" stands for material.\n                    for (var i = 0; i < materials.current.length; i++) {\n                        //Here is where we choose to assign for specific material\n                        if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                            materials.current[i].channels.NormalMap.texture =  {\n                                internalFormat: \"RGB\",\n                                magFilter: \"LINEAR\",\n                                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                texCoordUnit: 1,\n                                textureTarget: \"TEXTURE_2D\",\n                                uid: textureId3,\n                                wrapS: \"REPEAT\",\n                                wrapT: \"REPEAT\"\n                            };\n                        }else if(props.AccessorySelection[3] === 1000000){\n                            //Check that the material is not an accessoy\n                            if(!materials.current[i].name.includes(\"Accessory\")){\n                                materials.current[i].channels.NormalMap.texture =  {\n                                    internalFormat: \"RGB\",\n                                    magFilter: \"LINEAR\",\n                                    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                    texCoordUnit: 1,\n                                    textureTarget: \"TEXTURE_2D\",\n                                    uid: textureId3,\n                                    wrapS: \"REPEAT\",\n                                    wrapT: \"REPEAT\"\n                                };\n                            }else{\n                                //the material belongs to an accessory\n                            }\n                        }\n                    }\n\n                    countGlock4++; //This is to check that it is the last texture being updated otherwise continue the assigning the textures the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n                    if (countGlock4 == 4){\n                        //Loop through the material to update the specific material\n                        for (var i = 0; i < materials.current.length; i++) {\n                            //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n                            if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }else if(props.AccessorySelection[3] === 1000000){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }\n                        }\n                    }\n                });\n            }else{\n                // console.log('Only model will be changed')\n            }\n        }\n      }, [props.AccessorySelection]);\n    \n}","/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ObjectVisibility.jsx",["168","169","170"],[],"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/useIsMount.jsx",[],[],{"ruleId":"171","severity":1,"message":"172","line":3,"column":8,"nodeType":"173","messageId":"174","endLine":3,"endColumn":15},{"ruleId":"171","severity":1,"message":"175","line":4,"column":8,"nodeType":"173","messageId":"174","endLine":4,"endColumn":13},{"ruleId":"171","severity":1,"message":"176","line":5,"column":8,"nodeType":"173","messageId":"174","endLine":5,"endColumn":13},{"ruleId":"171","severity":1,"message":"177","line":6,"column":8,"nodeType":"173","messageId":"174","endLine":6,"endColumn":14},{"ruleId":"171","severity":1,"message":"178","line":7,"column":8,"nodeType":"173","messageId":"174","endLine":7,"endColumn":12},{"ruleId":"171","severity":1,"message":"179","line":8,"column":8,"nodeType":"173","messageId":"174","endLine":8,"endColumn":12},{"ruleId":"171","severity":1,"message":"180","line":17,"column":12,"nodeType":"173","messageId":"174","endLine":17,"endColumn":33},{"ruleId":"171","severity":1,"message":"181","line":55,"column":12,"nodeType":"173","messageId":"174","endLine":55,"endColumn":26},{"ruleId":"182","severity":1,"message":"183","line":63,"column":39,"nodeType":"184","messageId":"185","endLine":63,"endColumn":41},{"ruleId":"171","severity":1,"message":"186","line":82,"column":12,"nodeType":"173","messageId":"174","endLine":82,"endColumn":27},{"ruleId":"171","severity":1,"message":"187","line":98,"column":12,"nodeType":"173","messageId":"174","endLine":98,"endColumn":23},{"ruleId":"171","severity":1,"message":"188","line":7,"column":8,"nodeType":"173","messageId":"174","endLine":7,"endColumn":12},{"ruleId":"171","severity":1,"message":"189","line":8,"column":8,"nodeType":"173","messageId":"174","endLine":8,"endColumn":12},{"ruleId":"171","severity":1,"message":"190","line":17,"column":12,"nodeType":"173","messageId":"174","endLine":17,"endColumn":37},{"ruleId":"171","severity":1,"message":"191","line":1,"column":24,"nodeType":"173","messageId":"174","endLine":1,"endColumn":33},{"ruleId":"171","severity":1,"message":"192","line":1,"column":35,"nodeType":"173","messageId":"174","endLine":1,"endColumn":43},{"ruleId":"171","severity":1,"message":"193","line":6,"column":10,"nodeType":"173","messageId":"174","endLine":6,"endColumn":23},{"ruleId":"171","severity":1,"message":"194","line":1,"column":9,"nodeType":"173","messageId":"174","endLine":1,"endColumn":15},{"ruleId":"195","severity":1,"message":"196","line":44,"column":6,"nodeType":"197","endLine":44,"endColumn":39,"suggestions":"198"},{"ruleId":"171","severity":1,"message":"199","line":34,"column":10,"nodeType":"173","messageId":"174","endLine":34,"endColumn":16},{"ruleId":"171","severity":1,"message":"200","line":34,"column":18,"nodeType":"173","messageId":"174","endLine":34,"endColumn":27},{"ruleId":"182","severity":1,"message":"183","line":42,"column":20,"nodeType":"184","messageId":"185","endLine":42,"endColumn":22},{"ruleId":"195","severity":1,"message":"201","line":57,"column":6,"nodeType":"197","endLine":57,"endColumn":18,"suggestions":"202"},{"ruleId":"171","severity":1,"message":"203","line":106,"column":17,"nodeType":"173","messageId":"174","endLine":106,"endColumn":18},{"ruleId":"171","severity":1,"message":"194","line":2,"column":10,"nodeType":"173","messageId":"174","endLine":2,"endColumn":16},{"ruleId":"195","severity":1,"message":"204","line":58,"column":10,"nodeType":"197","endLine":58,"endColumn":37,"suggestions":"205"},{"ruleId":"171","severity":1,"message":"192","line":1,"column":21,"nodeType":"173","messageId":"174","endLine":1,"endColumn":29},{"ruleId":"195","severity":1,"message":"206","line":30,"column":10,"nodeType":"197","endLine":30,"endColumn":40,"suggestions":"207"},{"ruleId":"171","severity":1,"message":"194","line":1,"column":10,"nodeType":"173","messageId":"174","endLine":1,"endColumn":16},{"ruleId":"171","severity":1,"message":"208","line":12,"column":12,"nodeType":"173","messageId":"174","endLine":12,"endColumn":19},{"ruleId":"209","severity":1,"message":"210","line":51,"column":30,"nodeType":"173","messageId":"211","endLine":51,"endColumn":31},{"ruleId":"182","severity":1,"message":"183","line":52,"column":43,"nodeType":"184","messageId":"185","endLine":52,"endColumn":45},{"ruleId":"182","severity":1,"message":"183","line":56,"column":42,"nodeType":"184","messageId":"185","endLine":56,"endColumn":44},{"ruleId":"182","severity":1,"message":"183","line":60,"column":48,"nodeType":"184","messageId":"185","endLine":60,"endColumn":50},{"ruleId":"209","severity":1,"message":"212","line":71,"column":25,"nodeType":"173","messageId":"211","endLine":71,"endColumn":34},{"ruleId":"182","severity":1,"message":"183","line":73,"column":48,"nodeType":"184","messageId":"185","endLine":73,"endColumn":50},{"ruleId":"182","severity":1,"message":"183","line":77,"column":42,"nodeType":"184","messageId":"185","endLine":77,"endColumn":44},{"ruleId":"182","severity":1,"message":"183","line":81,"column":48,"nodeType":"184","messageId":"185","endLine":81,"endColumn":50},{"ruleId":"209","severity":1,"message":"212","line":92,"column":25,"nodeType":"173","messageId":"211","endLine":92,"endColumn":34},{"ruleId":"182","severity":1,"message":"183","line":94,"column":43,"nodeType":"184","messageId":"185","endLine":94,"endColumn":45},{"ruleId":"182","severity":1,"message":"183","line":99,"column":42,"nodeType":"184","messageId":"185","endLine":99,"endColumn":44},{"ruleId":"182","severity":1,"message":"183","line":103,"column":48,"nodeType":"184","messageId":"185","endLine":103,"endColumn":50},{"ruleId":"195","severity":1,"message":"213","line":115,"column":10,"nodeType":"197","endLine":115,"endColumn":36,"suggestions":"214"},{"ruleId":"171","severity":1,"message":"194","line":2,"column":10,"nodeType":"173","messageId":"174","endLine":2,"endColumn":16},{"ruleId":"182","severity":1,"message":"183","line":78,"column":37,"nodeType":"184","messageId":"185","endLine":78,"endColumn":39},{"ruleId":"209","severity":1,"message":"210","line":80,"column":30,"nodeType":"173","messageId":"211","endLine":80,"endColumn":31},{"ruleId":"182","severity":1,"message":"183","line":129,"column":37,"nodeType":"184","messageId":"185","endLine":129,"endColumn":39},{"ruleId":"209","severity":1,"message":"210","line":131,"column":34,"nodeType":"173","messageId":"211","endLine":131,"endColumn":35},{"ruleId":"182","severity":1,"message":"183","line":183,"column":37,"nodeType":"184","messageId":"185","endLine":183,"endColumn":39},{"ruleId":"209","severity":1,"message":"210","line":185,"column":34,"nodeType":"173","messageId":"211","endLine":185,"endColumn":35},{"ruleId":"182","severity":1,"message":"183","line":236,"column":37,"nodeType":"184","messageId":"185","endLine":236,"endColumn":39},{"ruleId":"209","severity":1,"message":"210","line":238,"column":34,"nodeType":"173","messageId":"211","endLine":238,"endColumn":35},{"ruleId":"195","severity":1,"message":"204","line":256,"column":10,"nodeType":"197","endLine":256,"endColumn":36,"suggestions":"215"},{"ruleId":"171","severity":1,"message":"192","line":1,"column":21,"nodeType":"173","messageId":"174","endLine":1,"endColumn":29},{"ruleId":"171","severity":1,"message":"216","line":3,"column":10,"nodeType":"173","messageId":"174","endLine":3,"endColumn":24},{"ruleId":"195","severity":1,"message":"217","line":126,"column":10,"nodeType":"197","endLine":126,"endColumn":39,"suggestions":"218"},"no-unused-vars","'InfoPic' is defined but never used.","Identifier","unusedVar","'Check' is defined but never used.","'Reset' is defined but never used.","'Slider' is defined but never used.","'Data' is defined but never used.","'Dots' is defined but never used.","'AccessoryTabSelection' is defined but never used.","'EquipAccessory' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ShowAnnotations' is defined but never used.","'ResetConfig' is defined but never used.","'Hide' is defined but never used.","'Show' is defined but never used.","'AccessoriesMenuVisibility' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'TextureChange' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isMount'. Either include it or remove the dependency array.","ArrayExpression",["219"],"'camera' is assigned a value but never used.","'setCamera' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'accessories', 'header', and 'splashLogo'. Either include them or remove the dependency array.",["220"],"'j' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'apiRef', 'isMount', and 'materials'. Either include them or remove the dependency array.",["221"],"React Hook useEffect has missing dependencies: 'annotations', 'apiRef', and 'isMount'. Either include them or remove the dependency array.",["222"],"'showing' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'Selection' is already defined.","React Hook useEffect has missing dependencies: 'apiRef', 'isMount', 'itemsCount', 'lightCount', 'lightSelection', 'opticSelection', 'opticsCount', 'suppressorCount', and 'suppressorSelection'. Either include them or remove the dependency array.",["223"],["224"],"'MaterialChange' is defined but never used.","React Hook useEffect has missing dependencies: 'apiRef', 'isMount', 'materials', 'objTexture', 'objectsStateID', and 'props'. Either include them or remove the dependency array.",["225"],{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"230","fix":"236"},{"desc":"237","fix":"238"},"Update the dependencies array to be: [isMount, props.AccessoriesMenuVisibility]",{"range":"239","text":"240"},"Update the dependencies array to be: [accessories, header, loadFactor, splashLogo]",{"range":"241","text":"242"},"Update the dependencies array to be: [apiRef, isMount, materials, props.AccessorySelection]",{"range":"243","text":"244"},"Update the dependencies array to be: [annotations, apiRef, isMount, props.AnnotationVisibility]",{"range":"245","text":"246"},"Update the dependencies array to be: [apiRef, isMount, itemsCount, lightCount, lightSelection, opticSelection, opticsCount, props.AccessorySelection, suppressorCount, suppressorSelection]",{"range":"247","text":"248"},{"range":"249","text":"244"},"Update the dependencies array to be: [apiRef, isMount, materials, objTexture, objectsStateID, props, props.AccessoryVisibility]",{"range":"250","text":"251"},[1648,1681],"[isMount, props.AccessoriesMenuVisibility]",[2299,2311],"[accessories, header, loadFactor, splashLogo]",[2922,2949],"[apiRef, isMount, materials, props.AccessorySelection]",[984,1014],"[annotations, apiRef, isMount, props.AnnotationVisibility]",[5437,5463],"[apiRef, isMount, itemsCount, lightCount, lightSelection, opticSelection, opticsCount, props.AccessorySelection, suppressorCount, suppressorSelection]",[16313,16339],[5471,5500],"[apiRef, isMount, materials, objTexture, objectsStateID, props, props.AccessoryVisibility]"]