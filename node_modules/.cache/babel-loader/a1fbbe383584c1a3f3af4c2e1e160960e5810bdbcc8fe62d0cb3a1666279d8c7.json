{"ast":null,"code":"var _s = $RefreshSig$();\n//Main\nimport { useRef, useEffect } from 'react';\n\n//Additional Files\nimport { useIsMount } from '../useIsMount';\nimport TextureInfo from '../../api/API_ModelInfo.json';\n\n//*********REFRENCE**************/\n//props.AccessorySelection[]\n//AccessorieID(int), ObjectID(int), TextureChange(bool), UID(int)\n//*********REFRENCE**************/\n\n//TODO This can be more dynamic, currently the textures are being \"imported\" every time. That run should be skipped if the texture has beeen imported in the past\n//Additionally, Diffuse, mettalic, roughness and normal assignment code is copy paste....theyre very similar and can be consolidated to smaller code otherwise it's a pain changing in 4 different places. \n//materials are reassigned to all objects at end during reset config. This can be more specific to only the materials that have been changed for less computation. \n//Adding texture change to accessories can add more complication in the future.....\n\nexport const TextureChange = (props, apiRef, materials) => {\n  _s();\n  console.log(materials);\n  //Function that runs and returns a bool on initial mount\n  const isMount = useIsMount();\n  useEffect(() => {\n    if (isMount) {\n      // console.log('mounting in textureChange')\n    } else {\n      if (props.AccessorySelection[2]) {\n        //confirms that it will be a texture change. (props.AccessorySelection[2] returns true or false)\n        var countGlock4 = 0;\n        var DiffuseURL, MetallicURL, RoughnessURL, NormalURL;\n        // console.log(materials)\n\n        // //TODO: we should only add texture if it hasnt been added\n        //Api fetch to retrieve URL information\n        DiffuseURL = TextureInfo.Model[props.AccessorySelection[3]].Diffuse;\n        MetallicURL = TextureInfo.Model[props.AccessorySelection[3]].Metallic;\n        RoughnessURL = TextureInfo.Model[props.AccessorySelection[3]].Roughness;\n        NormalURL = TextureInfo.Model[props.AccessorySelection[3]].Normal;\n        console.log(DiffuseURL);\n        console.log(MetallicURL);\n        console.log(RoughnessURL);\n        console.log(NormalURL);\n\n        //DIFFUSE/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        apiRef.current.addTexture(DiffuseURL, function (err, textureId0) {\n          //Loop through all materials\n          for (var i = 0; i < materials.current.length; i++) {\n            //Check that the material matches the accessory selection\n            if (materials.current[i].name.endsWith(props.AccessorySelection[0])) {\n              // console.log(materials.current[i].name)//Specific material we are changing\n              materials.current[i].channels.AlbedoPBR.texture = {\n                internalFormat: \"RGB\",\n                magFilter: \"LINEAR\",\n                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                texCoordUnit: 1,\n                textureTarget: \"TEXTURE_2D\",\n                uid: textureId0,\n                wrapS: \"REPEAT\",\n                wrapT: \"REPEAT\"\n              };\n            } else if (props.AccessorySelection[3] === 1000000) {\n              //ResetConfig\n              //Check that the material is not an accessoy\n              if (!materials.current[i].name.includes(\"Accessory\")) {\n                materials.current[i].channels.AlbedoPBR.texture = {\n                  internalFormat: \"RGB\",\n                  magFilter: \"LINEAR\",\n                  minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                  texCoordUnit: 1,\n                  textureTarget: \"TEXTURE_2D\",\n                  uid: textureId0,\n                  wrapS: \"REPEAT\",\n                  wrapT: \"REPEAT\"\n                };\n              } else {\n                //the material belongs to an accessory\n              }\n            }\n          }\n          countGlock4++; //This is to check that it is the last texture being updated otherwise continue assigning the textures and the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n          if (countGlock4 == 4) {\n            //Loop through the material to update the specific material\n            for (var i = 0; i < materials.current.length; i++) {\n              //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n              if (materials.current[i].name.endsWith(props.AccessorySelection[0])) {\n                apiRef.current.setMaterial(materials.current[i], function (err) {\n                  console.log('Material Assigned');\n                });\n              } else if (props.AccessorySelection[3] === 1000000) {\n                apiRef.current.setMaterial(materials.current[i], function (err) {\n                  console.log('Material Assigned');\n                });\n              }\n            }\n          }\n        });\n\n        //METALLIC/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        apiRef.current.addTexture(MetallicURL, function (err, textureId1) {\n          for (var i = 0; i < materials.current.length; i++) {\n            //Here is where we choose to assign for specific material\n            if (materials.current[i].name.endsWith(props.AccessorySelection[0])) {\n              materials.current[i].channels.MetalnessPBR.texture = {\n                internalFormat: \"RGB\",\n                magFilter: \"LINEAR\",\n                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                texCoordUnit: 1,\n                textureTarget: \"TEXTURE_2D\",\n                uid: textureId1,\n                wrapS: \"REPEAT\",\n                wrapT: \"REPEAT\"\n              };\n            } else if (props.AccessorySelection[3] === 1000000) {\n              //Check that the material is not an accessoy\n              if (!materials.current[i].name.includes(\"Accessory\")) {\n                materials.current[i].channels.MetalnessPBR.texture = {\n                  internalFormat: \"RGB\",\n                  magFilter: \"LINEAR\",\n                  minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                  texCoordUnit: 1,\n                  textureTarget: \"TEXTURE_2D\",\n                  uid: textureId1,\n                  wrapS: \"REPEAT\",\n                  wrapT: \"REPEAT\"\n                };\n              } else {\n                //the material belongs to an accessory\n              }\n            }\n          }\n          countGlock4++; //This is to check that it is the last texture being updated otherwise continue the assigning the textures the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n          if (countGlock4 == 4) {\n            //Loop through the material to update the specific material\n            for (var i = 0; i < materials.current.length; i++) {\n              //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n\n              if (materials.current[i].name.endsWith(props.AccessorySelection[0])) {\n                apiRef.current.setMaterial(materials.current[i], function (err) {\n                  console.log('Material Assigned');\n                });\n              } else if (props.AccessorySelection[3] === 1000000) {\n                apiRef.current.setMaterial(materials.current[i], function (err) {\n                  console.log('Material Assigned');\n                });\n              }\n            }\n          }\n        });\n\n        //ROUGHNESS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        apiRef.current.addTexture(RoughnessURL, function (err, textureId2) {\n          //This is where the texture is assigned to the material the \"mat\" stands for material.\n          for (var i = 0; i < materials.current.length; i++) {\n            //Here is where we choose to assign for specific material\n            if (materials.current[i].name.endsWith(props.AccessorySelection[0])) {\n              materials.current[i].channels.RoughnessPBR.texture = {\n                internalFormat: \"RGB\",\n                magFilter: \"LINEAR\",\n                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                texCoordUnit: 1,\n                textureTarget: \"TEXTURE_2D\",\n                uid: textureId2,\n                wrapS: \"REPEAT\",\n                wrapT: \"REPEAT\"\n              };\n            } else if (props.AccessorySelection[3] === 1000000) {\n              //Check that the material is not an accessoy\n              if (!materials.current[i].name.includes(\"Accessory\")) {\n                materials.current[i].channels.RoughnessPBR.texture = {\n                  internalFormat: \"RGB\",\n                  magFilter: \"LINEAR\",\n                  minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                  texCoordUnit: 1,\n                  textureTarget: \"TEXTURE_2D\",\n                  uid: textureId2,\n                  wrapS: \"REPEAT\",\n                  wrapT: \"REPEAT\"\n                };\n              } else {\n                //the material belongs to an accessory\n              }\n            }\n          }\n          countGlock4++; //This is to check that it is the last texture being updated otherwise continue the assigning the textures the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n          if (countGlock4 == 4) {\n            //Loop through the material to update the specific material\n            for (var i = 0; i < materials.current.length; i++) {\n              //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n              if (materials.current[i].name.endsWith(props.AccessorySelection[0])) {\n                apiRef.current.setMaterial(materials.current[i], function (err) {\n                  console.log('Material Assigned');\n                });\n              } else if (props.AccessorySelection[3] === 1000000) {\n                apiRef.current.setMaterial(materials.current[i], function (err) {\n                  console.log('Material Assigned');\n                });\n              }\n            }\n          }\n        });\n\n        //NORMAL////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        apiRef.current.addTexture(NormalURL, function (err, textureId3) {\n          //This is where the texture is assigned to the material the \"mat\" stands for material.\n          for (var i = 0; i < materials.current.length; i++) {\n            //Here is where we choose to assign for specific material\n            if (materials.current[i].name.endsWith(props.AccessorySelection[0])) {\n              materials.current[i].channels.NormalMap.texture = {\n                internalFormat: \"RGB\",\n                magFilter: \"LINEAR\",\n                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                texCoordUnit: 1,\n                textureTarget: \"TEXTURE_2D\",\n                uid: textureId3,\n                wrapS: \"REPEAT\",\n                wrapT: \"REPEAT\"\n              };\n            } else if (props.AccessorySelection[3] === 1000000) {\n              //Check that the material is not an accessoy\n              if (!materials.current[i].name.includes(\"Accessory\")) {\n                materials.current[i].channels.NormalMap.texture = {\n                  internalFormat: \"RGB\",\n                  magFilter: \"LINEAR\",\n                  minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                  texCoordUnit: 1,\n                  textureTarget: \"TEXTURE_2D\",\n                  uid: textureId3,\n                  wrapS: \"REPEAT\",\n                  wrapT: \"REPEAT\"\n                };\n              } else {\n                //the material belongs to an accessory\n              }\n            }\n          }\n          countGlock4++; //This is to check that it is the last texture being updated otherwise continue the assigning the textures the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n          if (countGlock4 == 4) {\n            //Loop through the material to update the specific material\n            for (var i = 0; i < materials.current.length; i++) {\n              //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n              if (materials.current[i].name.endsWith(props.AccessorySelection[0])) {\n                apiRef.current.setMaterial(materials.current[i], function (err) {\n                  console.log('Material Assigned');\n                });\n              } else if (props.AccessorySelection[3] === 1000000) {\n                apiRef.current.setMaterial(materials.current[i], function (err) {\n                  console.log('Material Assigned');\n                });\n              }\n            }\n          }\n        });\n      } else {\n        // console.log('Only model will be changed')\n      }\n    }\n  }, [props.AccessorySelection]);\n};\n_s(TextureChange, \"WpLIN+14gCkECZeu9s1wHPvd3Vg=\", false, function () {\n  return [useIsMount];\n});\n_c = TextureChange;\nvar _c;\n$RefreshReg$(_c, \"TextureChange\");","map":{"version":3,"names":["useRef","useEffect","useIsMount","TextureInfo","TextureChange","props","apiRef","materials","_s","console","log","isMount","AccessorySelection","countGlock4","DiffuseURL","MetallicURL","RoughnessURL","NormalURL","Model","Diffuse","Metallic","Roughness","Normal","current","addTexture","err","textureId0","i","length","name","endsWith","channels","AlbedoPBR","texture","internalFormat","magFilter","minFilter","texCoordUnit","textureTarget","uid","wrapS","wrapT","includes","setMaterial","textureId1","MetalnessPBR","textureId2","RoughnessPBR","textureId3","NormalMap","_c","$RefreshReg$"],"sources":["/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/TextureChange.jsx"],"sourcesContent":["//Main\nimport { useRef, useEffect } from 'react';\n\n//Additional Files\nimport { useIsMount } from '../useIsMount';\nimport TextureInfo from '../../api/API_ModelInfo.json'\n\n//*********REFRENCE**************/\n    //props.AccessorySelection[]\n    //AccessorieID(int), ObjectID(int), TextureChange(bool), UID(int)\n//*********REFRENCE**************/\n\n//TODO This can be more dynamic, currently the textures are being \"imported\" every time. That run should be skipped if the texture has beeen imported in the past\n//Additionally, Diffuse, mettalic, roughness and normal assignment code is copy paste....theyre very similar and can be consolidated to smaller code otherwise it's a pain changing in 4 different places. \n//materials are reassigned to all objects at end during reset config. This can be more specific to only the materials that have been changed for less computation. \n//Adding texture change to accessories can add more complication in the future.....\n\nexport const TextureChange = ( props, apiRef, materials ) => {\n    console.log(materials)\n    //Function that runs and returns a bool on initial mount\n    const isMount = useIsMount();\n    useEffect(() => {\n        if(isMount){\n            // console.log('mounting in textureChange')\n        }else{\n            if(props.AccessorySelection[2]){//confirms that it will be a texture change. (props.AccessorySelection[2] returns true or false)\n                var countGlock4 = 0;\n                var DiffuseURL, MetallicURL, RoughnessURL, NormalURL;\n                // console.log(materials)\n\n                // //TODO: we should only add texture if it hasnt been added\n                //Api fetch to retrieve URL information\n                DiffuseURL = TextureInfo.Model[props.AccessorySelection[3]].Diffuse;\n                MetallicURL = TextureInfo.Model[props.AccessorySelection[3]].Metallic;\n                RoughnessURL = TextureInfo.Model[props.AccessorySelection[3]].Roughness;\n                NormalURL = TextureInfo.Model[props.AccessorySelection[3]].Normal;\n                console.log(DiffuseURL)\n                console.log(MetallicURL)\n                console.log(RoughnessURL)\n                console.log(NormalURL)\n\n                //DIFFUSE/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                apiRef.current.addTexture(DiffuseURL, function(err, textureId0) {\n                    //Loop through all materials\n                    for (var i = 0; i < materials.current.length; i++) {\n                            //Check that the material matches the accessory selection\n                            if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                                // console.log(materials.current[i].name)//Specific material we are changing\n                                materials.current[i].channels.AlbedoPBR.texture =  {\n                                    internalFormat: \"RGB\",\n                                    magFilter: \"LINEAR\",\n                                    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                    texCoordUnit: 1,\n                                    textureTarget: \"TEXTURE_2D\",\n                                    uid: textureId0,\n                                    wrapS: \"REPEAT\",\n                                    wrapT: \"REPEAT\"\n                                };\n                            }else if(props.AccessorySelection[3] === 1000000){//ResetConfig\n                                //Check that the material is not an accessoy\n                                if(!materials.current[i].name.includes(\"Accessory\")){\n                                    materials.current[i].channels.AlbedoPBR.texture =  {\n                                        internalFormat: \"RGB\",\n                                        magFilter: \"LINEAR\",\n                                        minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                        texCoordUnit: 1,\n                                        textureTarget: \"TEXTURE_2D\",\n                                        uid: textureId0,\n                                        wrapS: \"REPEAT\",\n                                        wrapT: \"REPEAT\"\n                                    };\n                                }else{\n                                    //the material belongs to an accessory\n                                }\n                            }\n                    }\n                    countGlock4++; //This is to check that it is the last texture being updated otherwise continue assigning the textures and the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n                    if (countGlock4 == 4){\n                    //Loop through the material to update the specific material\n                    for (var i = 0; i < materials.current.length; i++) {\n                        //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n                        if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                            apiRef.current.setMaterial(materials.current[i], function(err) {\n                                console.log('Material Assigned')\n                            });\n                        }else if(props.AccessorySelection[3] === 1000000){\n                            apiRef.current.setMaterial(materials.current[i], function(err) {\n                                console.log('Material Assigned')\n                            });\n                        }\n                    }\n                    }\n                });\n\n                //METALLIC/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                apiRef.current.addTexture(MetallicURL, function(err, textureId1) {\n                    for (var i = 0; i < materials.current.length; i++) {\n                        //Here is where we choose to assign for specific material\n                        if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                            materials.current[i].channels.MetalnessPBR.texture = {\n                                internalFormat: \"RGB\",\n                                magFilter: \"LINEAR\",\n                                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                texCoordUnit: 1,\n                                textureTarget: \"TEXTURE_2D\",\n                                uid: textureId1,\n                                wrapS: \"REPEAT\",\n                                wrapT: \"REPEAT\"\n                            };\n                        }else if(props.AccessorySelection[3] === 1000000){\n                            //Check that the material is not an accessoy\n                            if(!materials.current[i].name.includes(\"Accessory\")){\n                                materials.current[i].channels.MetalnessPBR.texture = {\n                                    internalFormat: \"RGB\",\n                                    magFilter: \"LINEAR\",\n                                    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                    texCoordUnit: 1,\n                                    textureTarget: \"TEXTURE_2D\",\n                                    uid: textureId1,\n                                    wrapS: \"REPEAT\",\n                                    wrapT: \"REPEAT\"\n                                };\n                            }else{\n                                //the material belongs to an accessory\n                            }\n                        }\n                    }\n                    countGlock4++; //This is to check that it is the last texture being updated otherwise continue the assigning the textures the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n                    if (countGlock4 == 4){\n                        //Loop through the material to update the specific material\n                        for (var i = 0; i < materials.current.length; i++) {\n                            //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n\n                            if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }else if(props.AccessorySelection[3] === 1000000){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }\n                        }\n                    }\n                });\n\n                //ROUGHNESS////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                apiRef.current.addTexture(RoughnessURL, function(err, textureId2) {\n                    //This is where the texture is assigned to the material the \"mat\" stands for material.\n                    for (var i = 0; i < materials.current.length; i++) {\n                        //Here is where we choose to assign for specific material\n                        if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                            materials.current[i].channels.RoughnessPBR.texture =  {\n                                internalFormat: \"RGB\",\n                                magFilter: \"LINEAR\",\n                                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                texCoordUnit: 1,\n                                textureTarget: \"TEXTURE_2D\",\n                                uid: textureId2,\n                                wrapS: \"REPEAT\",\n                                wrapT: \"REPEAT\"\n                            };\n                        }else if(props.AccessorySelection[3] === 1000000){\n                            //Check that the material is not an accessoy\n                            if(!materials.current[i].name.includes(\"Accessory\")){\n                                materials.current[i].channels.RoughnessPBR.texture =  {\n                                    internalFormat: \"RGB\",\n                                    magFilter: \"LINEAR\",\n                                    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                    texCoordUnit: 1,\n                                    textureTarget: \"TEXTURE_2D\",\n                                    uid: textureId2,\n                                    wrapS: \"REPEAT\",\n                                    wrapT: \"REPEAT\"\n                                };\n                            }else{\n                                //the material belongs to an accessory\n                            }\n                        }\n                    }\n\n                    countGlock4++; //This is to check that it is the last texture being updated otherwise continue the assigning the textures the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n                    if (countGlock4 == 4){\n                        //Loop through the material to update the specific material\n                        for (var i = 0; i < materials.current.length; i++) {\n                            //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n                            if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }else if(props.AccessorySelection[3] === 1000000){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }\n                        }\n                    }\n                });\n\n                //NORMAL////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                apiRef.current.addTexture(NormalURL, function(err, textureId3) {\n                    //This is where the texture is assigned to the material the \"mat\" stands for material.\n                    for (var i = 0; i < materials.current.length; i++) {\n                        //Here is where we choose to assign for specific material\n                        if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                            materials.current[i].channels.NormalMap.texture =  {\n                                internalFormat: \"RGB\",\n                                magFilter: \"LINEAR\",\n                                minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                texCoordUnit: 1,\n                                textureTarget: \"TEXTURE_2D\",\n                                uid: textureId3,\n                                wrapS: \"REPEAT\",\n                                wrapT: \"REPEAT\"\n                            };\n                        }else if(props.AccessorySelection[3] === 1000000){\n                            //Check that the material is not an accessoy\n                            if(!materials.current[i].name.includes(\"Accessory\")){\n                                materials.current[i].channels.NormalMap.texture =  {\n                                    internalFormat: \"RGB\",\n                                    magFilter: \"LINEAR\",\n                                    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n                                    texCoordUnit: 1,\n                                    textureTarget: \"TEXTURE_2D\",\n                                    uid: textureId3,\n                                    wrapS: \"REPEAT\",\n                                    wrapT: \"REPEAT\"\n                                };\n                            }else{\n                                //the material belongs to an accessory\n                            }\n                        }\n                    }\n\n                    countGlock4++; //This is to check that it is the last texture being updated otherwise continue the assigning the textures the rest of the maps(Albedo, Mettalic, Roughness, Normal).\n                    if (countGlock4 == 4){\n                        //Loop through the material to update the specific material\n                        for (var i = 0; i < materials.current.length; i++) {\n                            //This is where the material is set to the current model.. it's placed inside the texture function because otherwise it would be called too early. \n                            if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }else if(props.AccessorySelection[3] === 1000000){\n                                apiRef.current.setMaterial(materials.current[i], function(err) {\n                                    console.log('Material Assigned')\n                                });\n                            }\n                        }\n                    }\n                });\n            }else{\n                // console.log('Only model will be changed')\n            }\n        }\n      }, [props.AccessorySelection]);\n    \n}"],"mappings":";AAAA;AACA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;;AAEzC;AACA,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,WAAW,MAAM,8BAA8B;;AAEtD;AACI;AACA;AACJ;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGA,CAAEC,KAAK,EAAEC,MAAM,EAAEC,SAAS,KAAM;EAAAC,EAAA;EACzDC,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC;EACtB;EACA,MAAMI,OAAO,GAAGT,UAAU,CAAC,CAAC;EAC5BD,SAAS,CAAC,MAAM;IACZ,IAAGU,OAAO,EAAC;MACP;IAAA,CACH,MAAI;MACD,IAAGN,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,EAAC;QAAC;QAC5B,IAAIC,WAAW,GAAG,CAAC;QACnB,IAAIC,UAAU,EAAEC,WAAW,EAAEC,YAAY,EAAEC,SAAS;QACpD;;QAEA;QACA;QACAH,UAAU,GAAGX,WAAW,CAACe,KAAK,CAACb,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAACO,OAAO;QACnEJ,WAAW,GAAGZ,WAAW,CAACe,KAAK,CAACb,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAACQ,QAAQ;QACrEJ,YAAY,GAAGb,WAAW,CAACe,KAAK,CAACb,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAACS,SAAS;QACvEJ,SAAS,GAAGd,WAAW,CAACe,KAAK,CAACb,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAACU,MAAM;QACjEb,OAAO,CAACC,GAAG,CAACI,UAAU,CAAC;QACvBL,OAAO,CAACC,GAAG,CAACK,WAAW,CAAC;QACxBN,OAAO,CAACC,GAAG,CAACM,YAAY,CAAC;QACzBP,OAAO,CAACC,GAAG,CAACO,SAAS,CAAC;;QAEtB;QACAX,MAAM,CAACiB,OAAO,CAACC,UAAU,CAACV,UAAU,EAAE,UAASW,GAAG,EAAEC,UAAU,EAAE;UAC5D;UACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,SAAS,CAACgB,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;YAC3C;YACA,IAAGpB,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACE,IAAI,CAACC,QAAQ,CAACzB,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAC;cAC/D;cACAL,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACI,QAAQ,CAACC,SAAS,CAACC,OAAO,GAAI;gBAC/CC,cAAc,EAAE,KAAK;gBACrBC,SAAS,EAAE,QAAQ;gBACnBC,SAAS,EAAE,sBAAsB;gBACjCC,YAAY,EAAE,CAAC;gBACfC,aAAa,EAAE,YAAY;gBAC3BC,GAAG,EAAEb,UAAU;gBACfc,KAAK,EAAE,QAAQ;gBACfC,KAAK,EAAE;cACX,CAAC;YACL,CAAC,MAAK,IAAGpC,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,KAAK,OAAO,EAAC;cAAC;cAC9C;cACA,IAAG,CAACL,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACE,IAAI,CAACa,QAAQ,CAAC,WAAW,CAAC,EAAC;gBAChDnC,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACI,QAAQ,CAACC,SAAS,CAACC,OAAO,GAAI;kBAC/CC,cAAc,EAAE,KAAK;kBACrBC,SAAS,EAAE,QAAQ;kBACnBC,SAAS,EAAE,sBAAsB;kBACjCC,YAAY,EAAE,CAAC;kBACfC,aAAa,EAAE,YAAY;kBAC3BC,GAAG,EAAEb,UAAU;kBACfc,KAAK,EAAE,QAAQ;kBACfC,KAAK,EAAE;gBACX,CAAC;cACL,CAAC,MAAI;gBACD;cAAA;YAER;UACR;UACA5B,WAAW,EAAE,CAAC,CAAC;UACf,IAAIA,WAAW,IAAI,CAAC,EAAC;YACrB;YACA,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,SAAS,CAACgB,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;cAC/C;cACA,IAAGpB,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACE,IAAI,CAACC,QAAQ,CAACzB,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAC;gBAC/DN,MAAM,CAACiB,OAAO,CAACoB,WAAW,CAACpC,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,EAAE,UAASF,GAAG,EAAE;kBAC3DhB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;gBACpC,CAAC,CAAC;cACN,CAAC,MAAK,IAAGL,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,KAAK,OAAO,EAAC;gBAC7CN,MAAM,CAACiB,OAAO,CAACoB,WAAW,CAACpC,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,EAAE,UAASF,GAAG,EAAE;kBAC3DhB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;gBACpC,CAAC,CAAC;cACN;YACJ;UACA;QACJ,CAAC,CAAC;;QAEF;QACAJ,MAAM,CAACiB,OAAO,CAACC,UAAU,CAACT,WAAW,EAAE,UAASU,GAAG,EAAEmB,UAAU,EAAE;UAC7D,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,SAAS,CAACgB,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;YAC/C;YACA,IAAGpB,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACE,IAAI,CAACC,QAAQ,CAACzB,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAC;cAC/DL,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACI,QAAQ,CAACc,YAAY,CAACZ,OAAO,GAAG;gBACjDC,cAAc,EAAE,KAAK;gBACrBC,SAAS,EAAE,QAAQ;gBACnBC,SAAS,EAAE,sBAAsB;gBACjCC,YAAY,EAAE,CAAC;gBACfC,aAAa,EAAE,YAAY;gBAC3BC,GAAG,EAAEK,UAAU;gBACfJ,KAAK,EAAE,QAAQ;gBACfC,KAAK,EAAE;cACX,CAAC;YACL,CAAC,MAAK,IAAGpC,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,KAAK,OAAO,EAAC;cAC7C;cACA,IAAG,CAACL,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACE,IAAI,CAACa,QAAQ,CAAC,WAAW,CAAC,EAAC;gBAChDnC,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACI,QAAQ,CAACc,YAAY,CAACZ,OAAO,GAAG;kBACjDC,cAAc,EAAE,KAAK;kBACrBC,SAAS,EAAE,QAAQ;kBACnBC,SAAS,EAAE,sBAAsB;kBACjCC,YAAY,EAAE,CAAC;kBACfC,aAAa,EAAE,YAAY;kBAC3BC,GAAG,EAAEK,UAAU;kBACfJ,KAAK,EAAE,QAAQ;kBACfC,KAAK,EAAE;gBACX,CAAC;cACL,CAAC,MAAI;gBACD;cAAA;YAER;UACJ;UACA5B,WAAW,EAAE,CAAC,CAAC;UACf,IAAIA,WAAW,IAAI,CAAC,EAAC;YACjB;YACA,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,SAAS,CAACgB,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;cAC/C;;cAEA,IAAGpB,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACE,IAAI,CAACC,QAAQ,CAACzB,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAC;gBAC/DN,MAAM,CAACiB,OAAO,CAACoB,WAAW,CAACpC,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,EAAE,UAASF,GAAG,EAAE;kBAC3DhB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;gBACpC,CAAC,CAAC;cACN,CAAC,MAAK,IAAGL,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,KAAK,OAAO,EAAC;gBAC7CN,MAAM,CAACiB,OAAO,CAACoB,WAAW,CAACpC,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,EAAE,UAASF,GAAG,EAAE;kBAC3DhB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;gBACpC,CAAC,CAAC;cACN;YACJ;UACJ;QACJ,CAAC,CAAC;;QAEF;QACAJ,MAAM,CAACiB,OAAO,CAACC,UAAU,CAACR,YAAY,EAAE,UAASS,GAAG,EAAEqB,UAAU,EAAE;UAC9D;UACA,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,SAAS,CAACgB,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;YAC/C;YACA,IAAGpB,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACE,IAAI,CAACC,QAAQ,CAACzB,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAC;cAC/DL,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACI,QAAQ,CAACgB,YAAY,CAACd,OAAO,GAAI;gBAClDC,cAAc,EAAE,KAAK;gBACrBC,SAAS,EAAE,QAAQ;gBACnBC,SAAS,EAAE,sBAAsB;gBACjCC,YAAY,EAAE,CAAC;gBACfC,aAAa,EAAE,YAAY;gBAC3BC,GAAG,EAAEO,UAAU;gBACfN,KAAK,EAAE,QAAQ;gBACfC,KAAK,EAAE;cACX,CAAC;YACL,CAAC,MAAK,IAAGpC,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,KAAK,OAAO,EAAC;cAC7C;cACA,IAAG,CAACL,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACE,IAAI,CAACa,QAAQ,CAAC,WAAW,CAAC,EAAC;gBAChDnC,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACI,QAAQ,CAACgB,YAAY,CAACd,OAAO,GAAI;kBAClDC,cAAc,EAAE,KAAK;kBACrBC,SAAS,EAAE,QAAQ;kBACnBC,SAAS,EAAE,sBAAsB;kBACjCC,YAAY,EAAE,CAAC;kBACfC,aAAa,EAAE,YAAY;kBAC3BC,GAAG,EAAEO,UAAU;kBACfN,KAAK,EAAE,QAAQ;kBACfC,KAAK,EAAE;gBACX,CAAC;cACL,CAAC,MAAI;gBACD;cAAA;YAER;UACJ;UAEA5B,WAAW,EAAE,CAAC,CAAC;UACf,IAAIA,WAAW,IAAI,CAAC,EAAC;YACjB;YACA,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,SAAS,CAACgB,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;cAC/C;cACA,IAAGpB,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACE,IAAI,CAACC,QAAQ,CAACzB,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAC;gBAC/DN,MAAM,CAACiB,OAAO,CAACoB,WAAW,CAACpC,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,EAAE,UAASF,GAAG,EAAE;kBAC3DhB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;gBACpC,CAAC,CAAC;cACN,CAAC,MAAK,IAAGL,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,KAAK,OAAO,EAAC;gBAC7CN,MAAM,CAACiB,OAAO,CAACoB,WAAW,CAACpC,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,EAAE,UAASF,GAAG,EAAE;kBAC3DhB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;gBACpC,CAAC,CAAC;cACN;YACJ;UACJ;QACJ,CAAC,CAAC;;QAEF;QACAJ,MAAM,CAACiB,OAAO,CAACC,UAAU,CAACP,SAAS,EAAE,UAASQ,GAAG,EAAEuB,UAAU,EAAE;UAC3D;UACA,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,SAAS,CAACgB,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;YAC/C;YACA,IAAGpB,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACE,IAAI,CAACC,QAAQ,CAACzB,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAC;cAC/DL,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACI,QAAQ,CAACkB,SAAS,CAAChB,OAAO,GAAI;gBAC/CC,cAAc,EAAE,KAAK;gBACrBC,SAAS,EAAE,QAAQ;gBACnBC,SAAS,EAAE,sBAAsB;gBACjCC,YAAY,EAAE,CAAC;gBACfC,aAAa,EAAE,YAAY;gBAC3BC,GAAG,EAAES,UAAU;gBACfR,KAAK,EAAE,QAAQ;gBACfC,KAAK,EAAE;cACX,CAAC;YACL,CAAC,MAAK,IAAGpC,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,KAAK,OAAO,EAAC;cAC7C;cACA,IAAG,CAACL,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACE,IAAI,CAACa,QAAQ,CAAC,WAAW,CAAC,EAAC;gBAChDnC,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACI,QAAQ,CAACkB,SAAS,CAAChB,OAAO,GAAI;kBAC/CC,cAAc,EAAE,KAAK;kBACrBC,SAAS,EAAE,QAAQ;kBACnBC,SAAS,EAAE,sBAAsB;kBACjCC,YAAY,EAAE,CAAC;kBACfC,aAAa,EAAE,YAAY;kBAC3BC,GAAG,EAAES,UAAU;kBACfR,KAAK,EAAE,QAAQ;kBACfC,KAAK,EAAE;gBACX,CAAC;cACL,CAAC,MAAI;gBACD;cAAA;YAER;UACJ;UAEA5B,WAAW,EAAE,CAAC,CAAC;UACf,IAAIA,WAAW,IAAI,CAAC,EAAC;YACjB;YACA,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,SAAS,CAACgB,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;cAC/C;cACA,IAAGpB,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,CAACE,IAAI,CAACC,QAAQ,CAACzB,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAC;gBAC/DN,MAAM,CAACiB,OAAO,CAACoB,WAAW,CAACpC,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,EAAE,UAASF,GAAG,EAAE;kBAC3DhB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;gBACpC,CAAC,CAAC;cACN,CAAC,MAAK,IAAGL,KAAK,CAACO,kBAAkB,CAAC,CAAC,CAAC,KAAK,OAAO,EAAC;gBAC7CN,MAAM,CAACiB,OAAO,CAACoB,WAAW,CAACpC,SAAS,CAACgB,OAAO,CAACI,CAAC,CAAC,EAAE,UAASF,GAAG,EAAE;kBAC3DhB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;gBACpC,CAAC,CAAC;cACN;YACJ;UACJ;QACJ,CAAC,CAAC;MACN,CAAC,MAAI;QACD;MAAA;IAER;EACF,CAAC,EAAE,CAACL,KAAK,CAACO,kBAAkB,CAAC,CAAC;AAEpC,CAAC;AAAAJ,EAAA,CAhPYJ,aAAa;EAAA,QAGNF,UAAU;AAAA;AAAAgD,EAAA,GAHjB9C,aAAa;AAAA,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}