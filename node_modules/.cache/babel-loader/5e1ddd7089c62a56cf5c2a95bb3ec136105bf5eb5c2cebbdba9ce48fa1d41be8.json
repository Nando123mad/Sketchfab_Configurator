{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useIsMount } from '../useIsMount';\nimport { MaterialChange } from './MaterialChange';\nexport const ObjectVisibility = (props, apiRef, materials) => {\n  _s();\n  //Function that runs and returns a bool on initial mount\n  const isMount = useIsMount();\n  let objTexture = {\n    internalFormat: \"RGB\",\n    magFilter: \"LINEAR\",\n    minFilter: \"LINEAR_MIPMAP_LINEAR\",\n    texCoordUnit: 1,\n    textureTarget: \"TEXTURE_2D\",\n    uid: \"\",\n    wrapS: \"REPEAT\",\n    wrapT: \"REPEAT\"\n  };\n  const objectsStateID = [4, 2, 18, 1]; //Accessories material setID Manually set. \n  useEffect(() => {\n    if (isMount) {\n      console.log('Mounting in ObjectVisibility');\n    } else {\n      //Run code after initial mount     \n\n      console.log(props);\n      for (var i = 0; i < materials.current.length; i++) {\n        //save out materials\n        var m = materials.current[i];\n        if (props.AccessoryVisibility === 9) {\n          //special index indicating fully visible object\n          m.channels.Opacity = {\n            enable: true,\n            factor: 1.0,\n            type: \"dithering\",\n            objTexture\n          };\n          if (m.name.includes(\"OpticB\")) {\n            m.channels.Opacity = {\n              enable: true,\n              factor: 0,\n              type: \"refraction\",\n              objTexture\n            };\n          }\n          apiRef.current.setMaterial(materials.current[i], function (err) {});\n          //TODO Bad hardcoded method\n          // if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n          //     if( materials.current[i].name.match(/^\\d/) ){ \n          //         if(materials.current[i].name.startsWith(props.AccessorySelection[1])){\n\n          //             console.log('Material Assigned')\n          //             console.log(materials.current[i].name)\n          //             console.log(\"Its this accessory that should be getting changed: \"+ props.AccessorySelection[1])\n          //             console.log(\"From this tab: \"+ props.AccessorySelection[0])\n\n          //             materials.current[i].stateSetID  = objectsStateID[props.AccessorySelection[0]]\n          //             apiRef.current.setMaterial(materials.current[i], function(err) {\n          //             });\n          //         }\n          //     }\n          // }else{\n          //     apiRef.current.setMaterial(materials.current[i], function(err) {\n          //     });\n          // }\n        } else {\n          //Check that the material selected is for the correct accessory being focused on\n          if (!m.name.endsWith(props.AccessoryVisibility)) {\n            //All other non-focused objects\n            m.channels.Opacity = {\n              enable: true,\n              factor: 0.1,\n              type: \"dithering\",\n              objTexture\n            };\n            // //finally set the new material.\n            apiRef.current.setMaterial(m, function (err) {\n              // console.log(err);\n            });\n          } else {\n            //Focused Object\n            m.channels.Opacity = {\n              enable: true,\n              factor: 1.0,\n              type: \"dithering\",\n              objTexture\n            };\n            if (m.name.includes(\"OpticB\")) {\n              m.channels.Opacity = {\n                enable: true,\n                factor: 0,\n                type: \"refraction\",\n                objTexture\n              };\n            }\n            //TODO Bad hardcoded method\n            if (materials.current[i].name.endsWith(props.AccessoryVisibility)) {\n              if (materials.current[i].name.match(/^\\d/)) {\n                if (materials.current[i].name.startsWith(props.AccessorySelection[1])) {\n                  console.log('Material Assigned');\n                  console.log(materials.current[i].name);\n                  console.log(\"Its this accessory that should be getting changed: \" + props.AccessorySelection[1]);\n                  console.log(\"From this tab: \" + props.AccessorySelection[0]);\n                  materials.current[i].stateSetID = objectsStateID[props.AccessoryVisibility];\n                  apiRef.current.setMaterial(materials.current[i], function (err) {\n                    console.log('Material Assigned');\n                  });\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, [props.AccessoryVisibility]);\n};\n_s(ObjectVisibility, \"WpLIN+14gCkECZeu9s1wHPvd3Vg=\", false, function () {\n  return [useIsMount];\n});\n_c = ObjectVisibility;\nvar _c;\n$RefreshReg$(_c, \"ObjectVisibility\");","map":{"version":3,"names":["useEffect","useState","useIsMount","MaterialChange","ObjectVisibility","props","apiRef","materials","_s","isMount","objTexture","internalFormat","magFilter","minFilter","texCoordUnit","textureTarget","uid","wrapS","wrapT","objectsStateID","console","log","i","current","length","m","AccessoryVisibility","channels","Opacity","enable","factor","type","name","includes","setMaterial","err","endsWith","match","startsWith","AccessorySelection","stateSetID","_c","$RefreshReg$"],"sources":["/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/3DComponents/ObjectVisibility.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useIsMount } from '../useIsMount';\nimport { MaterialChange } from './MaterialChange';\n\nexport const ObjectVisibility = ( props, apiRef, materials ) => {\n    //Function that runs and returns a bool on initial mount\n    const isMount = useIsMount();\n\n    let objTexture = {\n        internalFormat: \"RGB\",\n        magFilter: \"LINEAR\",\n        minFilter: \"LINEAR_MIPMAP_LINEAR\",\n        texCoordUnit: 1,\n        textureTarget: \"TEXTURE_2D\",\n        uid: \"\",\n        wrapS: \"REPEAT\",\n        wrapT: \"REPEAT\"\n    };\n\n    const objectsStateID = [4,2,18,1]//Accessories material setID Manually set. \n    useEffect(() => {\n        if(isMount){\n            console.log('Mounting in ObjectVisibility')\n        }else{\n            //Run code after initial mount     \n\n            console.log(props)\n            for (var i = 0; i < materials.current.length; i++) {\n                //save out materials\n                var m = materials.current[i];\n                if(props.AccessoryVisibility===9){//special index indicating fully visible object\n                    m.channels.Opacity = {\n                        enable: true,\n                        factor: 1.0,\n                        type:\"dithering\",\n                        objTexture\n                    };\n\n                    if(m.name.includes(\"OpticB\")){\n                        m.channels.Opacity = {\n                            enable: true,\n                            factor: 0,\n                            type:\"refraction\",\n                            objTexture\n                        };\n                    }\n\n                    apiRef.current.setMaterial(materials.current[i], function(err) {\n                    });\n                    //TODO Bad hardcoded method\n                    // if(materials.current[i].name.endsWith(props.AccessorySelection[0])){\n                    //     if( materials.current[i].name.match(/^\\d/) ){ \n                    //         if(materials.current[i].name.startsWith(props.AccessorySelection[1])){\n\n                    //             console.log('Material Assigned')\n                    //             console.log(materials.current[i].name)\n                    //             console.log(\"Its this accessory that should be getting changed: \"+ props.AccessorySelection[1])\n                    //             console.log(\"From this tab: \"+ props.AccessorySelection[0])\n\n                    //             materials.current[i].stateSetID  = objectsStateID[props.AccessorySelection[0]]\n                    //             apiRef.current.setMaterial(materials.current[i], function(err) {\n                    //             });\n                    //         }\n                    //     }\n                    // }else{\n                    //     apiRef.current.setMaterial(materials.current[i], function(err) {\n                    //     });\n                    // }\n                }else{\n                    //Check that the material selected is for the correct accessory being focused on\n                    if(!m.name.endsWith(props.AccessoryVisibility)){\n                        //All other non-focused objects\n                        m.channels.Opacity = {\n                            enable:true,\n                            factor: 0.1,\n                            type:\"dithering\",\n                            objTexture\n                        };\n                        // //finally set the new material.\n                        apiRef.current.setMaterial(m, function(err) {\n                            // console.log(err);\n                        });\n                    }else{\n                        //Focused Object\n                        m.channels.Opacity = {\n                            enable: true,\n                            factor: 1.0,\n                            type:\"dithering\",\n                            objTexture\n                        };\n                        if(m.name.includes(\"OpticB\")){\n                            m.channels.Opacity = {\n                                enable: true,\n                                factor: 0,\n                                type:\"refraction\",\n                                objTexture\n                            };\n                        }\n                        //TODO Bad hardcoded method\n                        if(materials.current[i].name.endsWith(props.AccessoryVisibility)){\n                            if( materials.current[i].name.match(/^\\d/) ){ \n                                if(materials.current[i].name.startsWith(props.AccessorySelection[1])){\n                                    console.log('Material Assigned')\n                                    console.log(materials.current[i].name)\n                                    console.log(\"Its this accessory that should be getting changed: \"+ props.AccessorySelection[1])\n                                    console.log(\"From this tab: \"+ props.AccessorySelection[0])\n\n                                    materials.current[i].stateSetID  = objectsStateID[props.AccessoryVisibility]\n                                    apiRef.current.setMaterial(materials.current[i], function(err) {\n                                        console.log('Material Assigned')\n                                    });\n                                }\n                            }\n                        }\n\n                    }\n                }\n\n\n            }\n        }\n        \n\n            \n      }, [ props.AccessoryVisibility ]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}