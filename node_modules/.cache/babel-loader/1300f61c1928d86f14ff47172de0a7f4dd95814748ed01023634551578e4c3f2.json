{"ast":null,"code":"var _jsxFileName = \"/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Accessories.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../Styles/accessories.css\";\nimport InfoPic from \"../Images/../Images/information.svg\";\nimport Check from \"../Images/check_circle.png\";\nimport Reset from \"../Images/reset.png\";\nimport Slider from \"../Images/vertical-slider.png\";\nimport Data from \"../api/API_Accessories.json\";\nimport Dots from \"./Dots\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Accessories(props) {\n  _s();\n  const [accessoryTab, setAccessoryTab] = useState(0); //current accessory tab selection\n  const [equipment, setEquipment] = useState([0, 0, 0, 0, 0, 0, 3]); //equipment current selection\n  const [annotationSel, setAnnotationSel] = useState(null); //Annotation Visibility\n  const [accessoryFocus, setAccessoryFocus] = useState(false); //Accessory Visibility\n\n  //update current tab selection (value = tabIndex)\n  function AccessoryTabSelection(value) {\n    //Get accessory list\n    var elem = document.getElementsByClassName(\"leftside\");\n\n    //check if the selection is the current selected tab so we can skip\n    if (value === accessoryTab) {\n      //Clicked on the already selected tab\n      //Send accessoryTab index values upstream to change material visibility\n      if (accessoryFocus) {\n        //already on...so turn off focus\n        props.AccessoryVisibility(9);\n        elem[value].classList.remove(\"underline\");\n      } else {\n        //turn on focus\n        props.AccessoryVisibility(value);\n        elem[value].classList.add(\"underline\");\n      }\n      setAccessoryFocus(!accessoryFocus);\n    } else {\n      //Manually Send accessoryTab index of 9 to change material to full visibility\n      props.AccessoryVisibility(9);\n      setAccessoryFocus(false);\n\n      //Reset and turn off Annotations\n      setAnnotationSel(null);\n      props.AnnotationVisibility(false);\n\n      //Set accessory to fetch api for proper information displayed\n      setAccessoryTab(value);\n\n      //Loop through accessory list and assign default styling for all   \n      for (var i = 0; i < elem.length; i++) {\n        elem[i].className = \"leftside\";\n      }\n      //update current tab selection with higlighted styling\n      elem[value].classList.add(\"btnSelected\");\n    }\n  }\n\n  //send values to the sketchfabviewer specifiying the equipped accessory\n  //AccessorieID(int), ObjectID(int), TextureChange(bool), UID(int)\n  function EquipAccessory(accessoryTab, id, texChange, uid) {\n    // Create a copy of the array\n    const updatedEquipment = [...equipment];\n\n    // Modify the desired index\n    updatedEquipment[accessoryTab] = id;\n\n    //check if the selection is the already selected accessory\n    if (updatedEquipment[accessoryTab] == equipment[accessoryTab]) {\n      console.log('same Accessory is clicked');\n      props.AccessorySelection([accessoryTab, id, texChange, uid]);\n\n      //turn off item if its an accessory.\n    } else {\n      // Update the state with the modified array\n      setEquipment(updatedEquipment);\n\n      //Send values to parent\n      props.AccessorySelection([accessoryTab, id, texChange, uid]);\n\n      //turn off annotation\n      setAnnotationSel(null);\n      props.AnnotationVisibility(false);\n    }\n  }\n  function ShowAnnotations(id) {\n    //Only show annotation if its for the current equipment\n    if (id === equipment[accessoryTab]) {\n      //check if the selection is the already selected annotation\n      if (id === annotationSel) {\n        setAnnotationSel(null);\n        props.AnnotationVisibility(false);\n      } else {\n        setAnnotationSel(id);\n        props.AnnotationVisibility(true);\n      }\n    } else {\n      console.log('not the current selected equipment');\n    }\n  }\n  function ResetConfig() {\n    setEquipment([0, 0, 0, 0, 0, 0, 3]);\n    //Also if suppressor is on lets turn it off and change the camera position or atleast make a call to move the camera correctly. \n\n    //Pass a unique value (1000000) that forces a reset on texutres\n    props.AccessorySelection([0, 0, true, 1000000]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"load-accessories\",\n    className: \"accessories\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(Accessories, \"HmQMGwJTEBCaG2bC8TaUZDkyCqE=\");\n_c = Accessories;\nexport default Accessories;\nvar _c;\n$RefreshReg$(_c, \"Accessories\");","map":{"version":3,"names":["React","useState","InfoPic","Check","Reset","Slider","Data","Dots","jsxDEV","_jsxDEV","Accessories","props","_s","accessoryTab","setAccessoryTab","equipment","setEquipment","annotationSel","setAnnotationSel","accessoryFocus","setAccessoryFocus","AccessoryTabSelection","value","elem","document","getElementsByClassName","AccessoryVisibility","classList","remove","add","AnnotationVisibility","i","length","className","EquipAccessory","id","texChange","uid","updatedEquipment","console","log","AccessorySelection","ShowAnnotations","ResetConfig","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nando/Documents/GitHub/Sketchfab_Configurator/src/Componets/Accessories.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"../Styles/accessories.css\";\nimport InfoPic from \"../Images/../Images/information.svg\";\nimport Check from \"../Images/check_circle.png\";\nimport Reset from \"../Images/reset.png\";\nimport Slider from \"../Images/vertical-slider.png\";\nimport Data from \"../api/API_Accessories.json\";\nimport Dots from \"./Dots\";\n\nfunction Accessories(props) {\n  const [accessoryTab, setAccessoryTab] = useState(0);//current accessory tab selection\n  const [equipment, setEquipment] = useState([0,0,0,0,0,0,3])//equipment current selection\n  const [annotationSel, setAnnotationSel] = useState(null);//Annotation Visibility\n  const [accessoryFocus, setAccessoryFocus] = useState(false);//Accessory Visibility\n\n  //update current tab selection (value = tabIndex)\n  function AccessoryTabSelection(value){\n    //Get accessory list\n    var elem = document.getElementsByClassName(\"leftside\");  \n\n    //check if the selection is the current selected tab so we can skip\n    if(value === accessoryTab){//Clicked on the already selected tab\n      //Send accessoryTab index values upstream to change material visibility\n      if(accessoryFocus){//already on...so turn off focus\n        props.AccessoryVisibility(9);\n        elem[value].classList.remove(\"underline\");\n      }else{//turn on focus\n        props.AccessoryVisibility(value);\n        elem[value].classList.add(\"underline\");\n      }\n      setAccessoryFocus(!accessoryFocus);\n    }else{\n      //Manually Send accessoryTab index of 9 to change material to full visibility\n      props.AccessoryVisibility(9);\n      setAccessoryFocus(false);\n\n      //Reset and turn off Annotations\n      setAnnotationSel(null);\n      props.AnnotationVisibility(false);\n\n      //Set accessory to fetch api for proper information displayed\n      setAccessoryTab(value);\n  \n      //Loop through accessory list and assign default styling for all   \n      for (var i = 0; i < elem.length; i++) {\n        elem[i].className = \"leftside\";\n      }\n      //update current tab selection with higlighted styling\n      elem[value].classList.add(\"btnSelected\");\n    }\n  }\n  \n  //send values to the sketchfabviewer specifiying the equipped accessory\n  //AccessorieID(int), ObjectID(int), TextureChange(bool), UID(int)\n  function EquipAccessory(accessoryTab, id, texChange, uid){\n    // Create a copy of the array\n    const updatedEquipment = [...equipment];\n\n    // Modify the desired index\n    updatedEquipment[accessoryTab] = id; \n\n    //check if the selection is the already selected accessory\n    if(updatedEquipment[accessoryTab] == equipment[accessoryTab]){\n      console.log('same Accessory is clicked');\n      props.AccessorySelection([accessoryTab, id, texChange, uid]);\n\n      //turn off item if its an accessory.\n    }else{\n      // Update the state with the modified array\n      setEquipment(updatedEquipment); \n  \n      //Send values to parent\n      props.AccessorySelection([accessoryTab, id, texChange, uid]);\n\n      //turn off annotation\n      setAnnotationSel(null)\n      props.AnnotationVisibility(false);\n\n    }\n  }\n\n  function ShowAnnotations(id){\n    //Only show annotation if its for the current equipment\n    if(id===equipment[accessoryTab]){\n      //check if the selection is the already selected annotation\n      if(id === annotationSel){\n        setAnnotationSel(null)\n        props.AnnotationVisibility(false);\n      }else{\n        setAnnotationSel(id)\n        props.AnnotationVisibility(true);\n      }\n    }else{\n      console.log('not the current selected equipment')\n    }\n  }\n\n  function ResetConfig(){\n    setEquipment([0,0,0,0,0,0,3])\n    //Also if suppressor is on lets turn it off and change the camera position or atleast make a call to move the camera correctly. \n\n    //Pass a unique value (1000000) that forces a reset on texutres\n    props.AccessorySelection([0, 0, true, 1000000]);\n  }\n\n  return (\n    <div id='load-accessories' className=\"accessories\">\n      {/* <p className=\"scroll\">SCROLL</p> */}\n    </div>\n  );\n}\n\nexport default Accessories;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}